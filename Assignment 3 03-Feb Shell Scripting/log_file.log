{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:44:00.819Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:44:00.821Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:44:00.822Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:44:00.824Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:44:00.968Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:44:00.971Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:00.043Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:00.048Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:45:00.905Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:45:00.911Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:45:00.916Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:45:00.919Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'verbose',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:45:12.674Z',
  log: 'Request received with Query =>  {}  Params =>  {}  Headers => {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': '29627c0d-3891-42b3-ab46-151a206c3d18',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '} body => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:45:12.678Z',
  log: 'Request origin => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:45:12.698Z',
  log: 'flowRouter : execute flow triggered for flowId  63ac3beb37e53412a63aaf9a',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:45:12.700Z',
  log: 'flow 63ac3beb37e53412a63aaf9a execute headers:  {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': '29627c0d-3891-42b3-ab46-151a206c3d18',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'multiCacheLogger',
  timestamp: '2023-02-03T03:45:13.568Z',
  log: 'IS_REDIS_CACHE_ENABLED: ',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'multiCacheLogger',
  timestamp: '2023-02-03T03:45:13.569Z',
  log: 'redis cache process env url => redis://:Backflipt1234@3.93.61.4:6379',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'multiCacheLogger',
  timestamp: '2023-02-03T03:45:13.574Z',
  log: 'cache array is ',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:14.495Z',
  log: 'running flow:  63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.925Z',
  log: 'Unit execution started',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.928Z',
  log: 'authVariables: {}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.930Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    "  category: 'FLOW',\n" +
    '  shared: false,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  parentUnitsIds: [],\n' +
    '  subUnitsIds: [],\n' +
    '  readAccess: [],\n' +
    '  writeAccess: [],\n' +
    '  sharedVersions: [],\n' +
    "  name: 'test flow 3',\n" +
    "  description: '',\n" +
    '  trigger: {\n' +
    "    type: 'MANUAL',\n" +
    "    label: 'Manual Trigger',\n" +
    "    category: 'SYSTEM',\n" +
    "    id: 'MANUAL',\n" +
    "    name: 'Manual Trigger',\n" +
    "    description: ''\n" +
    '  },\n' +
    "  type: 'SERIAL',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '  inputGUISchema: [],\n' +
    '  units: [\n' +
    '    {\n' +
    "      integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "      name: 'Outlook Mail',\n" +
    "      description: 'Office 365 Suite ',\n" +
    "      outputRef: 'outlook_mail_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "      unitId: '5f8feffeedea7704396dc115',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    },\n' +
    '    {\n' +
    "      integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "      name: 'Slack',\n" +
    "      description: 'Slack Integration',\n" +
    "      outputRef: 'slack_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    "      unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    },\n' +
    '    {\n' +
    "      integrationId: '5f8463cedad3d80fb37bf738',\n" +
    "      name: 'Microsoft Teams',\n" +
    "      description: '',\n" +
    "      outputRef: 'microsoft_teams_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    "      unitId: '5f8463f4dad3d80fb37bf739',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7'\n" +
    '    }\n' +
    '  ],\n' +
    '  configurableAuth: {},\n' +
    "  versionName: 'v3',\n" +
    "  versionDescription: '',\n" +
    "  updatedBy: 'pavansandeep@backflipt.com',\n" +
    "  createdBy: 'pavansandeep@backflipt.com',\n" +
    "  versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2023-02-03T03:38:30.667Z',\n" +
    "  updatedAt: '2023-02-03T03:38:30.667Z',\n" +
    '  __v: 0\n' +
    '}  uc undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc834ab1410e2479903205',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.932Z',
  log: 'Running unit for unit id 63ac3beb37e53412a63aaf9a  with versionId 63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69  unit name test flow 3  with unit type SERIAL',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.932Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc834ab1410e2479903205',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.940Z',
  log: ' requiresAuthentication for unit  false',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.941Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.941Z',
  log: 'Prepare Input For Data triggered for input  undefined  parser  undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:15.942Z',
  log: 'parser empty',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.228Z',
  log: 'before executing: 5f8feffeedea7704396dc115 Outlook Mail outlook_mail_1',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.234Z',
  log: 'Unit execution started',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.235Z',
  log: 'authVariables: {}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.236Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  serviceCategory: [],\n' +
    "  name: 'Get My UserInfo',\n" +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  type: 'SERIAL',\n" +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      category: 'ENTITY_OPERATION',\n" +
    "      versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e'\n" +
    '    }\n' +
    '  ],\n' +
    "  tenantId: 'backflipt.com',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    '  tenantSpecific: false,\n' +
    '  inputGUISchema: [],\n' +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  versionName: 'V1',\n" +
    "  versionDescription: '',\n" +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  isDefaultVersion: true,\n' +
    "  createdAt: '2022-12-06T11:43:56.408Z',\n" +
    "  updatedAt: '2022-12-06T11:43:56.408Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  name: 'Outlook Mail',\n" +
    "  description: 'Office 365 Suite ',\n" +
    "  outputRef: 'outlook_mail_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc834ab1410e2479903205',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.237Z',
  log: 'Running unit for unit id 5f8feffeedea7704396dc115  with versionId 5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05  unit name Get My UserInfo  with unit type SERIAL',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.237Z',
  log: ' updating trace for unit uniqueId   d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.238Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc834ab1410e2479903205',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675395916237\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:16.242Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.150Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.157Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4569,\n' +
    '      ext_expires_in: 4569,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P8JHsocbOrJVIp3c0H-j7kQr-VaAWYkLHAh5uhuz2URns89GZd-IvhdoB2rccHrnPZTbnYlyziOzvzVtLyTD9gNW9CizqfJKN1IDie4vSi11NORnEBPZ3LGQqvsOtbdfGamLPiRHeS9icZ7BUXYCEmGMxfAZR5GQTEbekX4rb4GJIbFBMS91HY-IIhHbOr0og3V4a8l7XlZOG_z0caVeoC8nMXsXdA-8DeG_I1DyAVi3pZn3tDJTljPuJhbsfKSddhN2R9v0E9Sr_vtWAxEVuvEb4XoiJr6rMwMcQWF9Inwnx2xr1MpNoB-V-TqG9hcHgkTTrWw-0yk37JJrV68l4ahqwEUYVK0rSXdw_1LEccmGHwC0_4yg9vInnsZ2vumHDCawtUKqe1g4h_-bBFvaJ_g_hyzAlOkLjpBwtW6Sw9Ts6uc_RvyA2w0mmLtKghNJUXGGlGkWTOLLR3BwI55sPs30rdVDmSIXmL_odb-M3tL39fk7WlQHrsh_bhTpp2weuXpepN642mUPU4nfyrx_fIzttirvjsCZ6E2bq3nEwoVU_5dbo4eAxw1J-ot4v2iRGmkjNFNSteHTMQSvzbuqufbMss9wY0daBZvtZ8Hi-y-Nmn39Pvn_g-uXoHRbEr75agF0ZrRE27ngj_RDr6V6CJ8PW_RDhr1ppja_dQ7x1Q5jJDYryRE7-1kLpPk61Xre5Rea4FRY3cckfw5N5tblMqYM2mkiSBxI23vCPui17sdjoP03n8JEYlFVHWSWx7K8XyGsW2vkBAzNruFpW9U4d27OKUgAUsk1f6WhT4ZAQahyp9u3mr7nzf0aeGCD5C-amqgM9iIFcXOKfjUDaccPNwUhnmmnKEnpIiKW38o-oorANhBYl5K4x-sYIptU7KeUqIIZO9y_OstRw'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.161Z',
  log: 'parser empty',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.452Z',
  log: 'before executing: 5f47ad711995ad4d4db2f05e Http Client http_client_1',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.452Z',
  log: 'Unit execution started',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.452Z',
  log: 'authVariables: {}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.461Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  description: 'Makes request to URL',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA',\n" +
    "      key: 'uri'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    '      required: false,\n' +
    "      defaultValue: 'GET',\n" +
    "      uiType: 'DD',\n" +
    "      key: 'method',\n" +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      label: 'Method'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      keyValues: [Array],\n' +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT'\n" +
    '    },\n' +
    '    {\n' +
    "      uiType: 'OBJECT',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    '      keyValues: [Array],\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json'\n" +
    '    },\n' +
    '    {\n' +
    '      keyValues: [Array],\n' +
    "      defaultParser: 'JSON_PATH',\n" +
    '      multiValue: true,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    '      required: false,\n' +
    "      valueLabel: 'Param'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      defaultValue: 'JSON',\n" +
    "      uiType: 'DD',\n" +
    '      pickListValues: [Array],\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false\n' +
    '    }\n' +
    '  ],\n' +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    `    '        // options.form = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.form = body;\\n' +\n" +
    "    '    } else if(_config.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '        throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return rp(options)\\n' +\n" +
    "    '        .catch(reason => {\\n' +\n" +
    "    '            const err = reason.error;\\n' +\n" +
    `    '            console.error("Error while making call with config: ");\\n' +\n` +
    "    '            console.error(_config);\\n' +\n" +
    "    '            console.error(err);\\n' +\n" +
    "    '            if(reason.statusCode) {\\n' +\n" +
    `    '                console.error("Status Code Error: " + reason.statusCode);\\n' +\n` +
    "    '                const description = `${reason.statusCode} from ${_config.uri}`;\\n' +\n" +
    "    '                const payload = {\\n' +\n" +
    "    '                    error: reason.error,\\n' +\n" +
    "    '                    _auth: _config._auth\\n' +\n" +
    "    '                };\\n' +\n" +
    "    '                throw err;\\n' +\n" +
    "    '                //throw new ExecutionError(description, reason.statusCode, payload);\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            throw err;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const convertKeyValueArrayToObject = (keyValues, decodeURI) => {\\n' +\n" +
    "    '    if(!keyValues) return keyValues;\\n' +\n" +
    "    '    return R.mergeAll(R.map(obj => {\\n' +\n" +
    "    '        const key = decodeURI ? decodeURIComponent(obj.key) : obj.key;\\n' +\n" +
    "    '        const value = decodeURI ? decodeURIComponent(obj.value) : obj.value;\\n' +\n" +
    "    '        return {[key]: value};\\n' +\n" +
    "    '    }, keyValues));\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const authHeader = (_auth) => {\\n' +\n" +
    "    '    let token = _auth.accessToken;\\n' +\n" +
    `    '    let tokenType = "Bearer";\\n' +\n` +
    `    '    if(_auth.authType === "BASIC") {\\n' +\n` +
    `    '        tokenType = "Basic";\\n' +\n` +
    "    '        token = token || encodeToBase64(`${_auth.userName}:${_auth.password}`);\\n' +\n" +
    `    '    } else if(_auth.authType === "API_KEY") {\\n' +\n` +
    "    '        token = token || _auth.apiKey;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    // return {Authorization: `${_auth.tokenType} ${token}`};\\n' +\n" +
    "    '    return {Authorization: `${tokenType} ${token}`};\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    `    "const encodeToBase64 = (string) => string && Buffer.from(string).toString('base64');\\n" +\n` +
    "    '\\n' +\n" +
    "    'module.exports = run;\\n',\n" +
    "  type: 'HTTP_CALL_VERSION_1',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  name: 'Http Call',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  versionName: 'v1.0',\n" +
    "  versionDescription: 'This is version-1',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  tenantSpecific: false,\n' +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2022-11-17T11:15:46.819Z',\n" +
    "  updatedAt: '2022-12-28T14:43:52.223Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  name: 'Http Client',\n" +
    "  description: 'Makes requests to web services using HTTP protocol',\n" +
    "  outputRef: 'http_client_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "  inputDataKey: '',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '  parser: {\n' +
    "    uri: { type: 'TEMPLATE' },\n" +
    "    decodeURI: { type: 'USER_INPUT' },\n" +
    "    method: { type: 'USER_INPUT' },\n" +
    "    headers_multiValue: { type: 'USER_INPUT' },\n" +
    "    qs_multiValue: { type: 'USER_INPUT' },\n" +
    "    contentType: { type: 'USER_INPUT' },\n" +
    "    body_multiValue: { type: 'JSON_PATH' },\n" +
    "    responseType: { type: 'USER_INPUT' },\n" +
    "    body: { type: 'JSON_PATH' }\n" +
    '  },\n' +
    '  input: {\n' +
    "    uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '    decodeURI: false,\n' +
    "    method: 'GET',\n" +
    "    headers: '',\n" +
    "    qs: '',\n" +
    "    contentType: 'application/json',\n" +
    "    body: '',\n" +
    "    responseType: 'JSON'\n" +
    '  },\n' +
    "  category: 'ENTITY_OPERATION',\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  serviceId: '5f8feffeedea7704396dc115',\n" +
    "  serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  parentUnitUniqueId: [ 'd026a99e-65be-4f01-82fb-b1fe64a676c0' ]\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH"... 7849 more characters,
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.466Z',
  log: 'Running unit for unit id 5f47ad711995ad4d4db2f05e  with versionId 5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e  unit name Http Call  with unit type HTTP_CALL_VERSION_1',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.466Z',
  log: ' updating trace for unit uniqueId   9be24b6d-3c4a-490a-bc8f-9d5152a0acde',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.467Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc834ab1410e2479903205',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675395916237\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      running: true,\n' +
    '      startTime: 1675395917465,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.469Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.470Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.473Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'TEMPLATE' },\n" +
    "  decodeURI: { type: 'USER_INPUT' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'JSON_PATH' },\n" +
    "  responseType: { type: 'USER_INPUT' },\n" +
    "  body: { type: 'JSON_PATH' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4569,\n' +
    '      ext_expires_in: 4569,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P8JHsocbOrJVIp3c0H-j7kQr-VaAWYkLHAh5uhuz2URns89GZd-IvhdoB2rccHrnPZTbnYlyziOzvzVtLyTD9gNW9CizqfJKN1IDie4vSi11NORnEBPZ3LGQqvsOtbdfGamLPiRHeS9icZ7BUXYCEmGMxfAZR5GQTEbekX4rb4GJIbFBMS91HY-IIhHbOr0og3V4a8l7XlZOG_z0caVeoC8nMXsXdA-8DeG_I1DyAVi3pZn3tDJTljPuJhbsfKSddhN2R9v0E9Sr_vtWAxEVuvEb4XoiJr6rMwMcQWF9Inwnx2xr1MpNoB-V-TqG9hcHgkTTrWw-0yk37JJrV68l4ahqwEUYVK0rSXdw_1LEccmGHwC0_4yg9vInnsZ2vumHDCawtUKqe1g4h_-bBFvaJ_g_hyzAlOkLjpBwtW6Sw9Ts6uc_RvyA2w0mmLtKghNJUXGGlGkWTOLLR3BwI55sPs30rdVDmSIXmL_odb-M3tL39fk7WlQHrsh_bhTpp2weuXpepN642mUPU4nfyrx_fIzttirvjsCZ6E2bq3nEwoVU_5dbo4eAxw1J-ot4v2iRGmkjNFNSteHTMQSvzbuqufbMss9wY0daBZvtZ8Hi-y-Nmn39Pvn_g-uXoHRbEr75agF0ZrRE27ngj_RDr6V6CJ8PW_RDhr1ppja_dQ7x1Q5jJDYryRE7-1kLpPk61Xre5Rea4FRY3cckfw5N5tblMqYM2mkiSBxI23vCPui17sdjoP03n8JEYlFVHWSWx7K8XyGsW2vkBAzNruFpW9U4d27OKUgAUsk1f6WhT4ZAQahyp9u3mr7nzf0aeGCD5C-amqgM9iIFcXOKfjUDaccPNwUhnmmnKEnpIiKW38o-oorANhBYl5K4x-sYIptU7KeUqIIZO9y_OstRw'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.477Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body', 'type' ], value: 'JSON_PATH' }\n" +
    ']',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.478Z',
  log: 'TransformedInput  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.478Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.478Z',
  log: 'valuePath => uri',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.478Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.479Z',
  log: ' value from input for value path => uri  is  {{{_auth.baseUri}}}/v1.0/me',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.491Z',
  log: ' value after compile input  => https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.492Z',
  log: ' setting value for valuePath  uri  with value  https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.494Z',
  log: "node => { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.494Z',
  log: 'valuePath => decodeURI',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.494Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: 'valuePath => method',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: 'valuePath => contentType',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.495Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.496Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.496Z',
  log: ' value from input for value path => body_multiValue  is  null',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.496Z',
  log: ' value from data  => null',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.496Z',
  log: ' setting value for valuePath  body_multiValue  with value  null',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.497Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.497Z',
  log: 'valuePath => responseType',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.498Z',
  log: "node => { path: [ 'body', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.498Z',
  log: 'valuePath => body',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.498Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.500Z',
  log: ' value from input for value path => body  is  ',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.500Z',
  log: ' value from data  => null',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.500Z',
  log: ' setting value for valuePath  body  with value  null',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.501Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.502Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.644Z',
  log: 'Execution Error:  EXECUTION_ERROR: 401 from https://graph.microsoft.com/v1.0/me\n' +
    '    at /Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2283:410\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:970)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    '  statusCode: 401,\n' +
    '  payload: {\n' +
    '    error: { error: [Object] },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '604f1f394623800f078d69b5',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://graph.microsoft.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "      tokenType: 'Bearer',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: true\n' +
    '    }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'warn',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.650Z',
  log: 'Execution Error auth:  {\n' +
    "  userId: 'pavansandeep@backflipt.com',\n" +
    "  credentialId: '604f1f394623800f078d69b5',\n" +
    "  authType: 'OAUTH_2',\n" +
    "  grantType: 'auth_code',\n" +
    "  baseUri: 'https://graph.microsoft.com',\n" +
    '  configParams: {},\n' +
    "  accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "  tokenType: 'Bearer',\n" +
    '  tokenInfo: {\n' +
    "    token_type: 'Bearer',\n" +
    "    scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '    expires_in: 4569,\n' +
    '    ext_expires_in: 4569,\n' +
    "    access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "    refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P8JHsocbOrJVIp3c0H-j7kQr-VaAWYkLHAh5uhuz2URns89GZd-IvhdoB2rccHrnPZTbnYlyziOzvzVtLyTD9gNW9CizqfJKN1IDie4vSi11NORnEBPZ3LGQqvsOtbdfGamLPiRHeS9icZ7BUXYCEmGMxfAZR5GQTEbekX4rb4GJIbFBMS91HY-IIhHbOr0og3V4a8l7XlZOG_z0caVeoC8nMXsXdA-8DeG_I1DyAVi3pZn3tDJTljPuJhbsfKSddhN2R9v0E9Sr_vtWAxEVuvEb4XoiJr6rMwMcQWF9Inwnx2xr1MpNoB-V-TqG9hcHgkTTrWw-0yk37JJrV68l4ahqwEUYVK0rSXdw_1LEccmGHwC0_4yg9vInnsZ2vumHDCawtUKqe1g4h_-bBFvaJ_g_hyzAlOkLjpBwtW6Sw9Ts6uc_RvyA2w0mmLtKghNJUXGGlGkWTOLLR3BwI55sPs30rdVDmSIXmL_odb-M3tL39fk7WlQHrsh_bhTpp2weuXpepN642mUPU4nfyrx_fIzttirvjsCZ6E2bq3nEwoVU_5dbo4eAxw1J-ot4v2iRGmkjNFNSteHTMQSvzbuqufbMss9wY0daBZvtZ8Hi-y-Nmn39Pvn_g-uXoHRbEr75agF0ZrRE27ngj_RDr6V6CJ8PW_RDhr1ppja_dQ7x1Q5jJDYryRE7-1kLpPk61Xre5Rea4FRY3cckfw5N5tblMqYM2mkiSBxI23vCPui17sdjoP03n8JEYlFVHWSWx7K8XyGsW2vkBAzNruFpW9U4d27OKUgAUsk1f6WhT4ZAQahyp9u3mr7nzf0aeGCD5C-amqgM9iIFcXOKfjUDaccPNwUhnmmnKEnpIiKW38o-oorANhBYl5K4x-sYIptU7KeUqIIZO9y_OstRw'\n" +
    '  },\n' +
    '  canBeRefreshed: true\n' +
    '} auth.canBeRefreshed: true',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:17.652Z',
  log: 'retrying for token refresh:  pavansandeep@backflipt.com backflipt.com 5f47ad711995ad4d4db2f05e 604f1f394623800f078d69b5',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'warn',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.478Z',
  log: 'Retry running flow:  5f47ad711995ad4d4db2f05e  for version  5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e for user:  pavansandeep@backflipt.com',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.485Z',
  log: 'unit :  {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  description: 'Makes request to URL',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA',\n" +
    "      key: 'uri'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    '      required: false,\n' +
    "      defaultValue: 'GET',\n" +
    "      uiType: 'DD',\n" +
    "      key: 'method',\n" +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      label: 'Method'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      keyValues: [Array],\n' +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT'\n" +
    '    },\n' +
    '    {\n' +
    "      uiType: 'OBJECT',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    '      keyValues: [Array],\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json'\n" +
    '    },\n' +
    '    {\n' +
    '      keyValues: [Array],\n' +
    "      defaultParser: 'JSON_PATH',\n" +
    '      multiValue: true,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    '      required: false,\n' +
    "      valueLabel: 'Param'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      defaultValue: 'JSON',\n" +
    "      uiType: 'DD',\n" +
    '      pickListValues: [Array],\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false\n' +
    '    }\n' +
    '  ],\n' +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    `    '        // options.form = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.form = body;\\n' +\n" +
    "    '    } else if(_config.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '        throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return rp(options)\\n' +\n" +
    "    '        .catch(reason => {\\n' +\n" +
    "    '            const err = reason.error;\\n' +\n" +
    `    '            console.error("Error while making call with config: ");\\n' +\n` +
    "    '            console.error(_config);\\n' +\n" +
    "    '            console.error(err);\\n' +\n" +
    "    '            if(reason.statusCode) {\\n' +\n" +
    `    '                console.error("Status Code Error: " + reason.statusCode);\\n' +\n` +
    "    '                const description = `${reason.statusCode} from ${_config.uri}`;\\n' +\n" +
    "    '                const payload = {\\n' +\n" +
    "    '                    error: reason.error,\\n' +\n" +
    "    '                    _auth: _config._auth\\n' +\n" +
    "    '                };\\n' +\n" +
    "    '                throw err;\\n' +\n" +
    "    '                //throw new ExecutionError(description, reason.statusCode, payload);\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            throw err;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const convertKeyValueArrayToObject = (keyValues, decodeURI) => {\\n' +\n" +
    "    '    if(!keyValues) return keyValues;\\n' +\n" +
    "    '    return R.mergeAll(R.map(obj => {\\n' +\n" +
    "    '        const key = decodeURI ? decodeURIComponent(obj.key) : obj.key;\\n' +\n" +
    "    '        const value = decodeURI ? decodeURIComponent(obj.value) : obj.value;\\n' +\n" +
    "    '        return {[key]: value};\\n' +\n" +
    "    '    }, keyValues));\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const authHeader = (_auth) => {\\n' +\n" +
    "    '    let token = _auth.accessToken;\\n' +\n" +
    `    '    let tokenType = "Bearer";\\n' +\n` +
    `    '    if(_auth.authType === "BASIC") {\\n' +\n` +
    `    '        tokenType = "Basic";\\n' +\n` +
    "    '        token = token || encodeToBase64(`${_auth.userName}:${_auth.password}`);\\n' +\n" +
    `    '    } else if(_auth.authType === "API_KEY") {\\n' +\n` +
    "    '        token = token || _auth.apiKey;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    // return {Authorization: `${_auth.tokenType} ${token}`};\\n' +\n" +
    "    '    return {Authorization: `${tokenType} ${token}`};\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    `    "const encodeToBase64 = (string) => string && Buffer.from(string).toString('base64');\\n" +\n` +
    "    '\\n' +\n" +
    "    'module.exports = run;\\n',\n" +
    "  type: 'HTTP_CALL_VERSION_1',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  name: 'Http Call',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  versionName: 'v1.0',\n" +
    "  versionDescription: 'This is version-1',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  tenantSpecific: false,\n' +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2022-11-17T11:15:46.819Z',\n" +
    "  updatedAt: '2022-12-28T14:43:52.223Z',\n" +
    '  __v: 0\n' +
    '} unitConfig:  {\n' +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  name: 'Http Client',\n" +
    "  description: 'Makes requests to web services using HTTP protocol',\n" +
    "  outputRef: 'http_client_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "  inputDataKey: '',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '  parser: {\n' +
    "    uri: { type: 'TEMPLATE' },\n" +
    "    decodeURI: { type: 'USER_INPUT' },\n" +
    "    method: { type: 'USER_INPUT' },\n" +
    "    headers_multiValue: { type: 'USER_INPUT' },\n" +
    "    qs_multiValue: { type: 'USER_INPUT' },\n" +
    "    contentType: { type: 'USER_INPUT' },\n" +
    "    body_multiValue: { type: 'JSON_PATH' },\n" +
    "    responseType: { type: 'USER_INPUT' },\n" +
    "    body: { type: 'JSON_PATH' }\n" +
    '  },\n' +
    '  input: {\n' +
    "    uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '    decodeURI: false,\n' +
    "    method: 'GET',\n" +
    "    headers: '',\n" +
    "    qs: '',\n" +
    "    contentType: 'application/json',\n" +
    "    body: '',\n" +
    "    responseType: 'JSON'\n" +
    '  },\n' +
    "  category: 'ENTITY_OPERATION',\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  serviceId: '5f8feffeedea7704396dc115',\n" +
    "  serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  parentUnitUniqueId: [ 'd026a99e-65be-4f01-82fb-b1fe64a676c0' ]\n" +
    '}  data :  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc834ab1410e2479903205',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.micr"... 8142 more characters,
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'warn',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.488Z',
  log: 'clearing trace auth for integration: 5f33f3f1b593b56a3b67163c',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.495Z',
  log: 'Error while running unit:  5f8feffeedea7704396dc115 Get My UserInfo {\n' +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  name: 'Outlook Mail',\n" +
    "  description: 'Office 365 Suite ',\n" +
    "  outputRef: 'outlook_mail_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {\n' +
    '    _execution: {\n' +
    "      _id: '63dc834ab1410e2479903205',\n" +
    "      tenantId: 'backflipt.com',\n" +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '      testRun: false,\n' +
    "      unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '      startedAt: 2023-02-03T03:45:15.917Z,\n' +
    '      lastRun: [Object]\n' +
    '    },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '604f1f394623800f078d69b5',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://graph.microsoft.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "      tokenType: 'Bearer',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: true\n' +
    '    },\n' +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    '  parser: {},\n' +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '} ReferenceError: getAuthenticationDataForCredentialForUser is not defined\n' +
    '    at /Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2460:365\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726)',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.497Z',
  log: 'logErrorTrace : Error while executing unit with unique id  d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.497Z',
  log: ' logErrorTrace : unit uniqueId  TRIGGER  startTime  1675395915046  success  true  endTime  1675395915046',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.497Z',
  log: ' logErrorTrace : unit uniqueId  TRIGGER  input  {}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.498Z',
  log: " logErrorTrace : unit uniqueId  TRIGGER  output  { category: 'FLOW', type: 'MANUAL' }",
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.498Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  startTime  1675395916237  success  undefined  endTime  undefined',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.499Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  input  undefined',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.499Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  output  undefined',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.499Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  startTime  1675395917465  success  false  endTime  1675395917652',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.499Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  input  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.499Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  output  undefined',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.502Z',
  log: ' unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  error  EXECUTION_ERROR: 401 from https://graph.microsoft.com/v1.0/me\n' +
    '    at /Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2283:410\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:970)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    '  statusCode: 401,\n' +
    '  payload: {\n' +
    '    error: { error: [Object] },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '604f1f394623800f078d69b5',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://graph.microsoft.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IkNPNFBXSFByQjNXcnVMX3ZxNTYzaFFxTmUyTHZlT3ZGbmpVT000SXl5dlkiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1MzI2NDIxLCJuYmYiOjE2NzUzMjY0MjEsImV4cCI6MTY3NTMzMTI5MSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUJhVktsTWhXOS91TWlKODFwQ2pOVGdrWHVROEYzdFZSWVB4RFBsZHlxd1pHcXB4b0trMkVSaTdPV0trd3hMQkhnckJOVWNDYlVpWUt3NXc0a0RHWStoUUtIdWJVK0JLK3lYTFFpdERPMjFJPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IjNJZFZYMkJENGtxQWlocnpHYWtuQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.DIRwerQAHRUQGg7f3rAoQhMQsj8yObOEnzcCacyRpVeyMsa0tfooVNsUiuUlaDZy0FlpwdkgfgvCth2rTicjBEpB21kqnWkDwqcwfpyu7uAdSc3UMrSGNGrzdYzGLqNXS6BjQtx1RqgpNqqik5Q76ImQHTCB-Hm-IoCK_Sz_3uM-5Z4_1G-xivfMUbQVj8tZvUtdzLrgCXqiRa7bt2_eX3PbFNREVlYFyJV8VYswlnKf6AjDkjSucA9Zskkxf0QfkrgBe4_8E-U51-alfYB1iNzfVSHWb0euo7u2-a0C9NWX0uOPa1tilAE-6oC6y9uqun5CJ3P3INJ8Hp73V39rGg',\n" +
    "      tokenType: 'Bearer',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: true\n' +
    '    }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.509Z',
  log: 'Execution Error:  ReferenceError: getAuthenticationDataForCredentialForUser is not defined\n' +
    '    at /Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2460:365\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    "  name: 'EXECUTION_ERROR',\n" +
    '  statusCode: 500,\n' +
    '  payload: { errorStack: [ [Object] ] }\n' +
    '}',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:45:27.510Z',
  log: 'completed flow with errors:  63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:45:40.066Z',
  log: 'storeExecutionData triggered for executionId :  63dc834ab1410e2479903205',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:45:40.072Z',
  log: 'putStorageElementFromBuffer storage wrapper containerName ',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 's3Logger',
  timestamp: '2023-02-03T03:45:40.073Z',
  log: 'S3 object creation triggered for region: ',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:45:40.070Z',
  log: 'storeExecutionData triggered for data:  {\n' +
    '  error: ReferenceError: getAuthenticationDataForCredentialForUser is not defined\n' +
    '      at /Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2460:365\n' +
    '      at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '      at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '      at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:138)\n' +
    '      at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '      at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '      at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '      at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    "    name: 'EXECUTION_ERROR',\n" +
    '    statusCode: 500,\n' +
    '    payload: { errorStack: [Array] }\n' +
    '  },\n' +
    '  input: {},\n' +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675395915046,\n' +
    '      endTime: 1675395915046,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675395916237,\n' +
    '      success: false,\n' +
    '      input: {},\n' +
    '      endTime: 1675395927506,\n' +
    '      error: [ExecutionError]\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675395917465,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      success: false,\n' +
    '      input: [Object],\n' +
    '      endTime: 1675395917652,\n' +
    '      error: [ExecutionError]\n' +
    '    }\n' +
    '  ]\n' +
    '}  executionId  63dc834ab1410e2479903205',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:45:40.073Z',
  log: 'isValidStoragePlatform triggered',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:45:40.602Z',
  log: 'fetching logger uid',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:45:40.610Z',
  log: 'fetching logger uid for request <ref *2> IncomingMessage {\n' +
    '  _readableState: ReadableState {\n' +
    '    objectMode: false,\n' +
    '    highWaterMark: 16384,\n' +
    '    buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '    length: 0,\n' +
    '    pipes: [],\n' +
    '    flowing: true,\n' +
    '    ended: true,\n' +
    '    endEmitted: true,\n' +
    '    reading: false,\n' +
    '    constructed: true,\n' +
    '    sync: false,\n' +
    '    needReadable: false,\n' +
    '    emittedReadable: false,\n' +
    '    readableListening: false,\n' +
    '    resumeScheduled: false,\n' +
    '    errorEmitted: false,\n' +
    '    emitClose: true,\n' +
    '    autoDestroy: true,\n' +
    '    destroyed: true,\n' +
    '    errored: null,\n' +
    '    closed: true,\n' +
    '    closeEmitted: true,\n' +
    "    defaultEncoding: 'utf8',\n" +
    '    awaitDrainWriters: null,\n' +
    '    multiAwaitDrain: false,\n' +
    '    readingMore: false,\n' +
    '    dataEmitted: true,\n' +
    '    decoder: null,\n' +
    '    encoding: null,\n' +
    '    [Symbol(kPaused)]: false\n' +
    '  },\n' +
    '  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n' +
    '  _eventsCount: 1,\n' +
    '  _maxListeners: undefined,\n' +
    '  socket: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    _server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    timeout: 600000,\n' +
    '    parser: HTTPParser {\n' +
    "      '0': [Function: bound setRequestTimeout],\n" +
    "      '1': [Function: parserOnHeaders],\n" +
    "      '2': [Function: parserOnHeadersComplete],\n" +
    "      '3': [Function: parserOnBody],\n" +
    "      '4': [Function: parserOnMessageComplete],\n" +
    "      '5': [Function: bound onParserExecute],\n" +
    "      '6': [Function: bound onParserTimeout],\n" +
    '      _headers: [],\n' +
    "      _url: '',\n" +
    '      socket: [Circular *1],\n' +
    '      incoming: null,\n' +
    '      outgoing: null,\n' +
    '      maxHeaderPairs: 2000,\n' +
    '      _consumed: true,\n' +
    '      onIncoming: [Function: bound parserOnIncoming],\n' +
    '      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n' +
    '    },\n' +
    '    on: [Function: socketListenerWrap],\n' +
    '    addListener: [Function: socketListenerWrap],\n' +
    '    prependListener: [Function: socketListenerWrap],\n' +
    '    setEncoding: [Function: socketSetEncoding],\n' +
    '    _paused: false,\n' +
    '    _httpMessage: null,\n' +
    "    _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 50572 },\n" +
    '    [Symbol(async_id_symbol)]: 2123,\n' +
    '    [Symbol(kHandle)]: TCP {\n' +
    '      reading: true,\n' +
    '      onconnection: null,\n' +
    '      _consumed: true,\n' +
    '      [Symbol(owner_symbol)]: [Circular *1]\n' +
    '    },\n' +
    '    [Symbol(lastWriteQueueSize)]: 0,\n' +
    '    [Symbol(timeout)]: Timeout {\n' +
    '      _idleTimeout: 600000,\n' +
    '      _idlePrev: [TimersList],\n' +
    '      _idleNext: [TimersList],\n' +
    '      _idleStart: 119343,\n' +
    '      _onTimeout: [Function: bound ],\n' +
    '      _timerArgs: undefined,\n' +
    '      _repeat: null,\n' +
    '      _destroyed: false,\n' +
    '      [Symbol(refed)]: false,\n' +
    '      [Symbol(kHasPrimitive)]: false,\n' +
    '      [Symbol(asyncId)]: 2124,\n' +
    '      [Symbol(triggerId)]: 2123\n' +
    '    },\n' +
    '    [Symbol(kBuffer)]: null,\n' +
    '    [Symbol(kBufferCb)]: null,\n' +
    '    [Symbol(kBufferGen)]: null,\n' +
    '    [Symbol(kCapture)]: false,\n' +
    '    [Symbol(kSetNoDelay)]: false,\n' +
    '    [Symbol(kSetKeepAlive)]: false,\n' +
    '    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n' +
    '    [Symbol(kBytesRead)]: 0,\n' +
    '    [Symbol(kBytesWritten)]: 0,\n' +
    '    [Symbol(RequestTimeout)]: undefined\n' +
    '  },\n' +
    '  httpVersionMajor: 1,\n' +
    '  httpVersionMinor: 1,\n' +
    "  httpVersion: '1.1',\n" +
    '  complete: true,\n' +
    '  rawHeaders: [\n' +
    "    'Accept',\n" +
    "    'application/json, text/plain, */*',\n" +
    "    'Content-Type',\n" +
    "    'application/json',\n" +
    "    'internal-token',\n" +
    "    'Backflipt123$',\n" +
    "    'as-user',\n" +
    "    'pavansandeep@backflipt.com',\n" +
    "    'from-tenant',\n" +
    "    'backflipt.com',\n" +
    "    'x-rq-id',\n" +
    "    '29627c0d-3891-42b3-ab46-151a206c3d18',\n" +
    "    'User-Agent',\n" +
    "    'axios/0.21.4',\n" +
    "    'Content-Length',\n" +
    "    '11',\n" +
    "    'Host',\n" +
    "    'localhost:3004',\n" +
    "    'Connection',\n" +
    "    'close'\n" +
    '  ],\n' +
    '  rawTrailers: [],\n' +
    '  aborted: false,\n' +
    '  upgrade: false,\n' +
    "  url: '/flows/63ac3beb37e53412a63aaf9a/execute',\n" +
    "  method: 'POST',\n" +
    '  statusCode: null,\n' +
    '  statusMessage: null,\n' +
    '  client: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,'... 8534 more characters,
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:45:41.733Z',
  log: 'Storing execution data complete for fileName :  63dc834ab1410e2479903205.bson',
  context: {
    requestId: '29627c0d-3891-42b3-ab46-151a206c3d18',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:00.128Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:00.131Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:46:00.999Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:46:00.999Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:46:01.000Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:46:01.001Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'verbose',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:46:43.988Z',
  log: 'Request received with Query =>  {}  Params =>  {}  Headers => {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '} body => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:46:43.989Z',
  log: 'Request origin => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:46:43.993Z',
  log: 'flowRouter : execute flow triggered for flowId  63ac3beb37e53412a63aaf9a',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:46:43.993Z',
  log: 'flow 63ac3beb37e53412a63aaf9a execute headers:  {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:44.691Z',
  log: 'running flow:  63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.949Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.950Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.953Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    "  category: 'FLOW',\n" +
    '  shared: false,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  parentUnitsIds: [],\n' +
    '  subUnitsIds: [],\n' +
    '  readAccess: [],\n' +
    '  writeAccess: [],\n' +
    '  sharedVersions: [],\n' +
    "  name: 'test flow 3',\n" +
    "  description: '',\n" +
    '  trigger: {\n' +
    "    type: 'MANUAL',\n" +
    "    label: 'Manual Trigger',\n" +
    "    category: 'SYSTEM',\n" +
    "    id: 'MANUAL',\n" +
    "    name: 'Manual Trigger',\n" +
    "    description: ''\n" +
    '  },\n' +
    "  type: 'SERIAL',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '  inputGUISchema: [],\n' +
    '  units: [\n' +
    '    {\n' +
    "      integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "      name: 'Outlook Mail',\n" +
    "      description: 'Office 365 Suite ',\n" +
    "      outputRef: 'outlook_mail_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "      unitId: '5f8feffeedea7704396dc115',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    },\n' +
    '    {\n' +
    "      integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "      name: 'Slack',\n" +
    "      description: 'Slack Integration',\n" +
    "      outputRef: 'slack_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    "      unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    },\n' +
    '    {\n' +
    "      integrationId: '5f8463cedad3d80fb37bf738',\n" +
    "      name: 'Microsoft Teams',\n" +
    "      description: '',\n" +
    "      outputRef: 'microsoft_teams_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    "      unitId: '5f8463f4dad3d80fb37bf739',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7'\n" +
    '    }\n' +
    '  ],\n' +
    '  configurableAuth: {},\n' +
    "  versionName: 'v3',\n" +
    "  versionDescription: '',\n" +
    "  updatedBy: 'pavansandeep@backflipt.com',\n" +
    "  createdBy: 'pavansandeep@backflipt.com',\n" +
    "  versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2023-02-03T03:38:30.667Z',\n" +
    "  updatedAt: '2023-02-03T03:38:30.667Z',\n" +
    '  __v: 0\n' +
    '}  uc undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.954Z',
  log: 'Running unit for unit id 63ac3beb37e53412a63aaf9a  with versionId 63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69  unit name test flow 3  with unit type SERIAL',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.955Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.955Z',
  log: ' requiresAuthentication for unit  false',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.956Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.956Z',
  log: 'Prepare Input For Data triggered for input  undefined  parser  undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.956Z',
  log: 'parser empty',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.958Z',
  log: 'before executing: 5f8feffeedea7704396dc115 Outlook Mail outlook_mail_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.958Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.958Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.959Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  serviceCategory: [],\n' +
    "  name: 'Get My UserInfo',\n" +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  type: 'SERIAL',\n" +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      category: 'ENTITY_OPERATION',\n" +
    "      versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e'\n" +
    '    }\n' +
    '  ],\n' +
    "  tenantId: 'backflipt.com',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    '  tenantSpecific: false,\n' +
    '  inputGUISchema: [],\n' +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  versionName: 'V1',\n" +
    "  versionDescription: '',\n" +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  isDefaultVersion: true,\n' +
    "  createdAt: '2022-12-06T11:43:56.408Z',\n" +
    "  updatedAt: '2022-12-06T11:43:56.408Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  name: 'Outlook Mail',\n" +
    "  description: 'Office 365 Suite ',\n" +
    "  outputRef: 'outlook_mail_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.960Z',
  log: 'Running unit for unit id 5f8feffeedea7704396dc115  with versionId 5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05  unit name Get My UserInfo  with unit type SERIAL',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.960Z',
  log: ' updating trace for unit uniqueId   d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.961Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396005960\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:45.961Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.770Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.773Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4139,\n' +
    '      ext_expires_in: 4139,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P9-S37QvczzgGdAuSOCHNyPBd8IUZ-ndZkMSNUcCftTS74hm2QBTjnz1P73i7onkePoySdSwplcZm15hubTGr5a8-eVWIsCsVUd9eT97s4xVdrtnTKzDNpUxuBqkp161BaSpFgaOnRtI-8drQjCw5XAanUWTBhOWX4s7zdMEAiPeZf1ws4WDiqGcYSJNZ63JJVneowYoV_W-MNwDi_APwesQaQPbUsvZZQ6oN_NawKFhA8CUvkYUd5EgIutGaGAqEK_yMjFCCpVXA62QkBENRZ0l27M69s20ymXpCJ9wt-I6LmUui85GGXUOxXqvTo2G0uq-pUEr6jcdFPMRnr8bE2WwCGzEcvDKt4ZhYPyV0G-g6nlFEcVE3wATsjktV5eiwGiamKcRCIW9Vtkmh8BaCtBrXCxG-ai9SEX5Af0lE4kWrUnHZp7CntnKrRCHv6v8rB3dyQcbdIeTyteXuUPrQfbBTxe8g8dEdeveDRbi1pudcrMypZgE4rC8CMVUXEGAQZxPJ6E_3JR6gh7X6naLN-A620at_wgAaeqvorB7gRw195dtI56ZDyc1ukSAw8K9ERKG4m1hM2Vi2-ZjaMQaIzQUwPb0UmsF8oXmv-ooBkYygRWE2yvek7R5b_iAmbVyZniXFpw_Fdf7gk2yVkiKmKlFgY12oi0R9bz_gufZfOzxDrEDN3SNAYzRj5VtgVCKdaSoiKSD6ID1fOClXWYPcYTIpHJQAuJGMCSvnRW2MMjxGfHbeJN39s_0NzrXCiNtzTeYnG_K-nTUyqxRynRXAA_ak3VdQSQA2ov1qo7PF428YgPu394KlHgMnLEYzI2nOjSheAdY0kkxIlTl_crvL4Sy8fXLqjbRZJspR3OIDdg2rY82JTABmQ1rO3e2JgOWvkCyzqYjX0'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.776Z',
  log: 'parser empty',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.778Z',
  log: 'before executing: 5f47ad711995ad4d4db2f05e Http Client http_client_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.778Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.778Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.785Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  description: 'Makes request to URL',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA',\n" +
    "      key: 'uri'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    '      required: false,\n' +
    "      defaultValue: 'GET',\n" +
    "      uiType: 'DD',\n" +
    "      key: 'method',\n" +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      label: 'Method'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      keyValues: [Array],\n' +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT'\n" +
    '    },\n' +
    '    {\n' +
    "      uiType: 'OBJECT',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    '      keyValues: [Array],\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json'\n" +
    '    },\n' +
    '    {\n' +
    '      keyValues: [Array],\n' +
    "      defaultParser: 'JSON_PATH',\n" +
    '      multiValue: true,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    '      required: false,\n' +
    "      valueLabel: 'Param'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      defaultValue: 'JSON',\n" +
    "      uiType: 'DD',\n" +
    '      pickListValues: [Array],\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false\n' +
    '    }\n' +
    '  ],\n' +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    `    '        // options.form = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.form = body;\\n' +\n" +
    "    '    } else if(_config.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '        throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return rp(options)\\n' +\n" +
    "    '        .catch(reason => {\\n' +\n" +
    "    '            const err = reason.error;\\n' +\n" +
    `    '            console.error("Error while making call with config: ");\\n' +\n` +
    "    '            console.error(_config);\\n' +\n" +
    "    '            console.error(err);\\n' +\n" +
    "    '            if(reason.statusCode) {\\n' +\n" +
    `    '                console.error("Status Code Error: " + reason.statusCode);\\n' +\n` +
    "    '                const description = `${reason.statusCode} from ${_config.uri}`;\\n' +\n" +
    "    '                const payload = {\\n' +\n" +
    "    '                    error: reason.error,\\n' +\n" +
    "    '                    _auth: _config._auth\\n' +\n" +
    "    '                };\\n' +\n" +
    "    '                throw err;\\n' +\n" +
    "    '                //throw new ExecutionError(description, reason.statusCode, payload);\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            throw err;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const convertKeyValueArrayToObject = (keyValues, decodeURI) => {\\n' +\n" +
    "    '    if(!keyValues) return keyValues;\\n' +\n" +
    "    '    return R.mergeAll(R.map(obj => {\\n' +\n" +
    "    '        const key = decodeURI ? decodeURIComponent(obj.key) : obj.key;\\n' +\n" +
    "    '        const value = decodeURI ? decodeURIComponent(obj.value) : obj.value;\\n' +\n" +
    "    '        return {[key]: value};\\n' +\n" +
    "    '    }, keyValues));\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const authHeader = (_auth) => {\\n' +\n" +
    "    '    let token = _auth.accessToken;\\n' +\n" +
    `    '    let tokenType = "Bearer";\\n' +\n` +
    `    '    if(_auth.authType === "BASIC") {\\n' +\n` +
    `    '        tokenType = "Basic";\\n' +\n` +
    "    '        token = token || encodeToBase64(`${_auth.userName}:${_auth.password}`);\\n' +\n" +
    `    '    } else if(_auth.authType === "API_KEY") {\\n' +\n` +
    "    '        token = token || _auth.apiKey;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    // return {Authorization: `${_auth.tokenType} ${token}`};\\n' +\n" +
    "    '    return {Authorization: `${tokenType} ${token}`};\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    `    "const encodeToBase64 = (string) => string && Buffer.from(string).toString('base64');\\n" +\n` +
    "    '\\n' +\n" +
    "    'module.exports = run;\\n',\n" +
    "  type: 'HTTP_CALL_VERSION_1',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  name: 'Http Call',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  versionName: 'v1.0',\n" +
    "  versionDescription: 'This is version-1',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  tenantSpecific: false,\n' +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2022-11-17T11:15:46.819Z',\n" +
    "  updatedAt: '2022-12-28T14:43:52.223Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  name: 'Http Client',\n" +
    "  description: 'Makes requests to web services using HTTP protocol',\n" +
    "  outputRef: 'http_client_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "  inputDataKey: '',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '  parser: {\n' +
    "    uri: { type: 'TEMPLATE' },\n" +
    "    decodeURI: { type: 'USER_INPUT' },\n" +
    "    method: { type: 'USER_INPUT' },\n" +
    "    headers_multiValue: { type: 'USER_INPUT' },\n" +
    "    qs_multiValue: { type: 'USER_INPUT' },\n" +
    "    contentType: { type: 'USER_INPUT' },\n" +
    "    body_multiValue: { type: 'JSON_PATH' },\n" +
    "    responseType: { type: 'USER_INPUT' },\n" +
    "    body: { type: 'JSON_PATH' }\n" +
    '  },\n' +
    '  input: {\n' +
    "    uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '    decodeURI: false,\n' +
    "    method: 'GET',\n" +
    "    headers: '',\n" +
    "    qs: '',\n" +
    "    contentType: 'application/json',\n" +
    "    body: '',\n" +
    "    responseType: 'JSON'\n" +
    '  },\n' +
    "  category: 'ENTITY_OPERATION',\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  serviceId: '5f8feffeedea7704396dc115',\n" +
    "  serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  parentUnitUniqueId: [ 'd026a99e-65be-4f01-82fb-b1fe64a676c0' ]\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH"... 7846 more characters,
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.788Z',
  log: 'Running unit for unit id 5f47ad711995ad4d4db2f05e  with versionId 5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e  unit name Http Call  with unit type HTTP_CALL_VERSION_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.788Z',
  log: ' updating trace for unit uniqueId   9be24b6d-3c4a-490a-bc8f-9d5152a0acde',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.789Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396005960\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      running: true,\n' +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.790Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.790Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.794Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'TEMPLATE' },\n" +
    "  decodeURI: { type: 'USER_INPUT' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'JSON_PATH' },\n" +
    "  responseType: { type: 'USER_INPUT' },\n" +
    "  body: { type: 'JSON_PATH' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4139,\n' +
    '      ext_expires_in: 4139,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P9-S37QvczzgGdAuSOCHNyPBd8IUZ-ndZkMSNUcCftTS74hm2QBTjnz1P73i7onkePoySdSwplcZm15hubTGr5a8-eVWIsCsVUd9eT97s4xVdrtnTKzDNpUxuBqkp161BaSpFgaOnRtI-8drQjCw5XAanUWTBhOWX4s7zdMEAiPeZf1ws4WDiqGcYSJNZ63JJVneowYoV_W-MNwDi_APwesQaQPbUsvZZQ6oN_NawKFhA8CUvkYUd5EgIutGaGAqEK_yMjFCCpVXA62QkBENRZ0l27M69s20ymXpCJ9wt-I6LmUui85GGXUOxXqvTo2G0uq-pUEr6jcdFPMRnr8bE2WwCGzEcvDKt4ZhYPyV0G-g6nlFEcVE3wATsjktV5eiwGiamKcRCIW9Vtkmh8BaCtBrXCxG-ai9SEX5Af0lE4kWrUnHZp7CntnKrRCHv6v8rB3dyQcbdIeTyteXuUPrQfbBTxe8g8dEdeveDRbi1pudcrMypZgE4rC8CMVUXEGAQZxPJ6E_3JR6gh7X6naLN-A620at_wgAaeqvorB7gRw195dtI56ZDyc1ukSAw8K9ERKG4m1hM2Vi2-ZjaMQaIzQUwPb0UmsF8oXmv-ooBkYygRWE2yvek7R5b_iAmbVyZniXFpw_Fdf7gk2yVkiKmKlFgY12oi0R9bz_gufZfOzxDrEDN3SNAYzRj5VtgVCKdaSoiKSD6ID1fOClXWYPcYTIpHJQAuJGMCSvnRW2MMjxGfHbeJN39s_0NzrXCiNtzTeYnG_K-nTUyqxRynRXAA_ak3VdQSQA2ov1qo7PF428YgPu394KlHgMnLEYzI2nOjSheAdY0kkxIlTl_crvL4Sy8fXLqjbRZJspR3OIDdg2rY82JTABmQ1rO3e2JgOWvkCyzqYjX0'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.797Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body', 'type' ], value: 'JSON_PATH' }\n" +
    ']',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.798Z',
  log: 'TransformedInput  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.798Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.799Z',
  log: 'valuePath => uri',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.799Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.799Z',
  log: ' value from input for value path => uri  is  {{{_auth.baseUri}}}/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.805Z',
  log: ' value after compile input  => https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.806Z',
  log: ' setting value for valuePath  uri  with value  https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.806Z',
  log: "node => { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: 'valuePath => decodeURI',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: 'valuePath => method',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.807Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.808Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.808Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.808Z',
  log: 'valuePath => contentType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: ' value from input for value path => body_multiValue  is  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: ' value from data  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.809Z',
  log: ' setting value for valuePath  body_multiValue  with value  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.810Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.811Z',
  log: 'valuePath => responseType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.811Z',
  log: "node => { path: [ 'body', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.811Z',
  log: 'valuePath => body',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.811Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.812Z',
  log: ' value from input for value path => body  is  ',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.812Z',
  log: ' value from data  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.812Z',
  log: ' setting value for valuePath  body  with value  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.812Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:46.812Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.484Z',
  log: 'executing unit complete for unit unique id  9be24b6d-3c4a-490a-bc8f-9d5152a0acde',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.485Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396005960\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.487Z',
  log: ' Result  => {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.488Z',
  log: 'executing unit complete for unit unique id  d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.488Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.489Z',
  log: ' Result  => {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.720Z',
  log: 'before executing: 5f9b0643e2ab68041d7bbffd Slack slack_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.721Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.722Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.725Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Get My User Id',\n" +
    "  integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "  type: 'SERIAL',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  createdAt: '2020-10-29T18:13:23.224Z',\n" +
    "  updatedAt: '2023-01-31T07:35:07.113Z',\n" +
    '  __v: 0,\n' +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f7b33614ff9701236686a37',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      versionId: '5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347',\n" +
    "      category: 'ENTITY_OPERATION'\n" +
    '    },\n' +
    '    {\n' +
    "      unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "      name: 'Selector',\n" +
    "      description: '',\n" +
    "      outputRef: 'selector_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "      versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "      category: 'CORE'\n" +
    '    }\n' +
    '  ],\n' +
    "  unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  versionName: 'Get My User Id',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '}  uc {\n' +
    "  integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "  name: 'Slack',\n" +
    "  description: 'Slack Integration',\n" +
    "  outputRef: 'slack_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    "  unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  }\n' +
    '}  trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.726Z',
  log: 'Running unit for unit id 5f9b0643e2ab68041d7bbffd  with versionId 5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe  unit name Get My User Id  with unit type SERIAL',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.727Z',
  log: ' updating trace for unit uniqueId   f9b3d66f-a032-4212-91bb-7a9d32299546',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.727Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:48.728Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.554Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.555Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.556Z',
  log: 'parser empty',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.792Z',
  log: 'before executing: 5f7b33614ff9701236686a37 Http Client http_client_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.794Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.795Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.801Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Http Call 2.0',\n" +
    "  description: '',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      key: 'uri',\n" +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'disableSSLVerification',\n" +
    "      label: 'Disable SSL Verification',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'method',\n" +
    "      label: 'Method',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'GET',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'json',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    }\n' +
    '  ],\n' +
    '  outputSchema: {\n' +
    "    type: 'FIXED',\n" +
    '    schema: {\n' +
    "      contentType: 'application/json',\n" +
    '      contentLength: 10,\n' +
    "      acceptRanges: 'bytes',\n" +
    "      contentStream: 'data stream'\n" +
    '    }\n' +
    '  },\n' +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const axios = require('axios');\\n" +\n` +
    `    "const https = require('https');\\n" +\n` +
    `    "const url = require('url');\\n" +\n` +
    `    "const path = require('path');\\n" +\n` +
    `    "const FormData = require('form-data');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '// const {InvalidDataError} = require(customErrorPath);\\n' +\n" +
    `    "// const {ExecutionError} = requireUtil('bhadra-build-js-utils/src/errors/custom-error');\\n" +\n` +
    `    "// const {InvalidDataError} = requireUtil('bhadra-build-js-utils/src/errors/custom-error');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const isValidUrl = (urlStr) => {\\n' +\n" +
    "    '    try {\\n' +\n" +
    "    '        new url.URL(urlStr);\\n' +\n" +
    "    '        return true;\\n' +\n" +
    "    '    } catch (e) {\\n' +\n" +
    "    '        return false;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = (input) => {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("http call 2.0 input: ", input);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(input.qs, input.decodeURI);\\n' +\n" +
    "    '    let headers = convertKeyValueArrayToObject(input.headers, input.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = input.decodeURI ? input.qs && R.zipObj(decodeURIValues(R.keys(input.qs)), decodeURIValues(R.values(input.qs))) : queryString;\\n' +\n" +
    "    '    const reqUrl = input.decodeURI ? decodeURIComponent(input.uri) : input.uri;\\n' +\n" +
    "    '\\n' +\n" +
    `    '    if(!isValidUrl(reqUrl)) throw new Error("Invalid Url: ");//throw new InvalidDataError("Invalid Url: " + reqUrl, {url: reqUrl});\\n' +\n` +
    "    '\\n' +\n" +
    "    '    const authHeaders = input.requiresAuthentication ? authHeader(input._auth) : {};\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let data = input.body && (input.contentType === INPUT_CONTENT_TYPE.JSON && typeof(input.body) === "string" ? JSON.parse(input.body) : input.body);\\n' +\n` +
    "    '    data = Array.isArray(data) && R.includes(input.contentType, [INPUT_CONTENT_TYPE.FORM_URL_ENCODED, INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA]) ? convertKeyValueArrayToObject(data, input.decodeURI) : data;\\n' +\n" +
    "    '    data = input.contentType !== INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA ? data : prepareFormData(data);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("type of data: ", typeof(data));\\n' +\n` +
    "    '\\n' +\n" +
    `    '    data = typeof(data) === "function" ? data() : data;\\n' +\n` +
    "    '\\n' +\n" +
    "    '    const responseType = input.responseType || RESPONSE_TYPE.JSON;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    headers = R.mergeLeft(headers || {}, authHeaders);\\n' +\n" +
    "    '    headers = input.contentType !== INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA ? headers : R.mergeLeft(data.getHeaders(), headers);\\n' +\n" +
    "    '\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: input.method || METHODS.GET,\\n' +\n" +
    "    '        url: reqUrl,\\n' +\n" +
    "    '        headers,\\n' +\n" +
    "    '        params: qs || {},\\n' +\n" +
    "    '        data,\\n' +\n" +
    "    '        responseType,\\n' +\n" +
    "    '        maxContentLength: Infinity,\\n' +\n" +
    "    '        maxBodyLength: Infinity\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    `    '    console.log("options =>",options);\\n' +\n` +
    "    '    if(input.disableSSLVerification) options.httpsAgent = new https.Agent({ rejectUnauthorized: false });\\n' +\n" +
    "    '\\n' +\n" +
    "    '    // if(input.contentType === INPUT_CONTENT_TYPE.JSON && input.body) {\\n' +\n" +
    `    '    //     // options.body = typeof(input.body) === "string" ? JSON.parse(input.body) : input.body;\\n' +\n` +
    "    '    //     options.body = body;\\n' +\n" +
    "    '    // }\\n' +\n" +
    "    '    // else if(input.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && input.body) {\\n' +\n" +
    "    '    //     // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], input.form));\\n' +\n" +
    `    '    //     // options.form = typeof(input.body) === "string" ? JSON.parse(input.body) : input.body;\\n' +\n` +
    "    '    //     options.form = body;\\n' +\n" +
    "    '    // } else if(input.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '    //     throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    // }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return axios(options)\\n' +\n" +
    "    '        .then(response => {\\n' +\n" +
    `    '            //console.log("resp headers: ", response.headers);\\n' +\n` +
    "    '            if(responseType === RESPONSE_TYPE.BINARY) {\\n' +\n" +
    "    '                return {\\n' +\n" +
    "    '                    contentStream: () => response.data,\\n' +\n" +
    `    "                    contentType: response.headers['content-type'],\\n" +\n` +
    `    "                    contentLength: response.headers['content-length'],\\n" +\n` +
    `    "                    acceptRanges: response.headers['accept-ranges']\\n" +\n` +
    "    '                };\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            else return response.data;\\n' +\n" +
    "    '        })\\n' +\n" +
    "    '        .catch(error => {\\n' +\n" +
    "    '\\n' +\n" +
    `    '            console.error("Error while making call with input: ", input, " error: ", error);\\n' +\n` +
    `    '            console.error("with response: ", error.response);\\n' +\n` +
    "    '\\n' +\n" +
    "    '            if (error.response) {\\n' +\n" +
    "    '\\n' +\n" +
    "    '                const resp = error.response;\\n' +\n" +
    "    '\\n' +\n" +
    "    '                if(resp.status) {\\n' +\n" +
    `    '                    console.error("Status Code Error: " + resp.status);\\n' +\n` +
    "    '                    const description = `${resp.status} from ${input.uri}`;\\n' +\n" +
    "    '                    // TODO pass error & response data\\n' +\n" +
    "    '                    const payload = {\\n' +\n" +
    "    '                        // error: {\\n' +\n" +
    "    '                        //     message: error.message,\\n' +\n" +
    "    '                        //     config: error.config\\n' +\n" +
    "    '                        // },\\n' +\n" +
    "    '                        // response: {\\n' +\n" +
    "    '                        //     data: resp.data,\\n' +\n" +
    "    '                        //     headers: resp.headers\\n' +\n" +
    "    '                        // },\\n' +\n" +
    "    '                        error: error.toJSON(),\\n' +\n" +
    "    '                        _auth: input._auth\\n' +\n" +
    "    '                    };\\n' +\n" +
    "    '                    //throw new ExecutionError(description, resp.status, payload);\\n' +\n" +
    "    '                    throw error;\\n' +\n" +
    "    '                }\\n' +\n" +
    "    '\\n' +\n" +
    "    '            } else if (error.request) {\\n' +\n" +
    "    '                // The request was made but no response was received\\n' +\n" +
    "    '                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\\n' +\n" +
    "    '                // http.ClientRequest in node.js\\n' +\n" +
    `    '                // console.error("error with request: ", error.request);\\n' +\n` +
    "    '            } else {\\n' +\n" +
    "    '                // Something happened in setting up the request that triggered an Error\\n' +\n" +
    `    "                //console.log('Error message: ', error.message);\\n" +\n` +
    "    '            }\\n' +\n" +
    `    '            //console.log("Error config: ", error.config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '            throw error;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "`... 6590 more characters,
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.805Z',
  log: 'Running unit for unit id 5f7b33614ff9701236686a37  with versionId 5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347  unit name Http Call 2.0  with unit type HTTP_CALL_VERSION_2',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.805Z',
  log: ' updating trace for unit uniqueId   f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.806Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      running: true,\n' +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.807Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.807Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.808Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    '  headers: [\n' +
    '    {\n' +
    "      key: 'Authorization',\n" +
    "      value: 'Bearer {{{_auth.tokenInfo.authed_user.access_token}}}'\n" +
    '    }\n' +
    '  ],\n' +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'USER_INPUT' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    '  headers: [ { key: [Object], value: [Object] } ],\n' +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'USER_INPUT' },\n" +
    "  responseType: { type: 'USER_INPUT' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.809Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers', 0, 'key', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers', 0, 'value', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }\n" +
    ']',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.809Z',
  log: 'TransformedInput  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    '  headers: [\n' +
    '    {\n' +
    "      key: 'Authorization',\n" +
    "      value: 'Bearer {{{_auth.tokenInfo.authed_user.access_token}}}'\n" +
    '    }\n' +
    '  ],\n' +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: 'valuePath => uri',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: 'valuePath => method',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.810Z',
  log: "node => { path: [ 'headers', 0, 'key', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.811Z',
  log: 'valuePath => headers.0.key',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.811Z',
  log: "node => { path: [ 'headers', 0, 'value', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.811Z',
  log: 'valuePath => headers.0.value',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.811Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.811Z',
  log: ' value from input for value path => headers.0.value  is  Bearer {{{_auth.tokenInfo.authed_user.access_token}}}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.814Z',
  log: ' value after compile input  => Bearer ',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.814Z',
  log: ' setting value for valuePath  headers.0.value  with value  Bearer ',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: 'valuePath => contentType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.818Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.819Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.819Z',
  log: 'valuePath => responseType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.819Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    "  headers: [ { key: 'Authorization', value: 'Bearer ' } ],\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:49.819Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.212Z',
  log: 'executing unit complete for unit unique id  f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.214Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.215Z',
  log: " Result  => { ok: false, error: 'not_authed' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.449Z',
  log: 'before executing: 5ee8ffe42d14f70c922c4192 Selector selector_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.453Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.454Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.456Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Selector',\n" +
    "  type: 'SIMPLE',\n" +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const jsonpath = require('jsonpath');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const run = async (data, _config) => {\\n' +\n" +
    `    '    //console.log("before running module: ");\\n' +\n` +
    "    '    //console.log(_config);\\n' +\n" +
    "    '    //console.log(typeof(data));\\n' +\n" +
    "    '    //console.log(typeof(_config));\\n' +\n" +
    "    '    if(Array.isArray(data)) return Promise.all(R.map(obj => run(obj, _config), data));\\n' +\n" +
    `    '    else if(typeof(_config.selectors) === "string") return getValueForPathOrDefault(data, _config.selectors, null);\\n' +\n` +
    "    '    else return R.map(sel => getValueForPathOrDefault(data, sel, null), _config.selectors);\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const getValueForPathOrDefault = (obj, path, def) => {\\n' +\n" +
    `    '    //console.log("fetching value for path: " + path);\\n' +\n` +
    "    '    //console.log(obj);\\n' +\n" +
    `    '    return jsonpath.value(obj, "$." + path) || def;\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'module.exports = {\\n' +\n" +
    "    '    run\\n' +\n" +
    "    '};',\n" +
    '  __v: 0,\n' +
    "  createdAt: '2020-08-21T08:33:20.711Z',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  updatedAt: '2022-02-01T14:38:10.605Z',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    '  deprecated: true,\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  versionName: 'Selector',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '}  uc {\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  name: 'Selector',\n" +
    "  description: '',\n" +
    "  outputRef: 'selector_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: false,\n' +
    "    selectors: 'http_client_1.user_id'\n" +
    '  },\n' +
    "  uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    "  serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  parentUnitUniqueId: [ 'f9b3d66f-a032-4212-91bb-7a9d32299546' ]\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true,\n' +
    "  result: { ok: false, error: 'not_authed' },\n" +
    "  http_client_1: { ok: false, error: 'not_authed' }\n" +
    '}  trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.457Z',
  log: 'Running unit for unit id 5ee8ffe42d14f70c922c4192  with versionId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  unit name Selector  with unit type SIMPLE',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.458Z',
  log: ' updating trace for unit uniqueId   a6c177aa-d489-4ba4-b705-60770f5f8a7a',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.461Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      running: true,\n' +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.463Z',
  log: ' requiresAuthentication for unit  false',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.464Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.465Z',
  log: 'Prepare Input For Data triggered for input  undefined  parser  undefined  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true,\n' +
    "  result: { ok: false, error: 'not_authed' },\n" +
    "  http_client_1: { ok: false, error: 'not_authed' }\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.466Z',
  log: 'parser empty',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.466Z',
  log: 'running simple unit for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.469Z',
  log: 'running simple unit for unit {\n' +
    "  _id: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Selector',\n" +
    "  type: 'SIMPLE',\n" +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const jsonpath = require('jsonpath');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const run = async (data, _config) => {\\n' +\n" +
    `    '    //console.log("before running module: ");\\n' +\n` +
    "    '    //console.log(_config);\\n' +\n" +
    "    '    //console.log(typeof(data));\\n' +\n" +
    "    '    //console.log(typeof(_config));\\n' +\n" +
    "    '    if(Array.isArray(data)) return Promise.all(R.map(obj => run(obj, _config), data));\\n' +\n" +
    `    '    else if(typeof(_config.selectors) === "string") return getValueForPathOrDefault(data, _config.selectors, null);\\n' +\n` +
    "    '    else return R.map(sel => getValueForPathOrDefault(data, sel, null), _config.selectors);\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const getValueForPathOrDefault = (obj, path, def) => {\\n' +\n" +
    `    '    //console.log("fetching value for path: " + path);\\n' +\n` +
    "    '    //console.log(obj);\\n' +\n" +
    `    '    return jsonpath.value(obj, "$." + path) || def;\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'module.exports = {\\n' +\n" +
    "    '    run\\n' +\n" +
    "    '};',\n" +
    '  __v: 0,\n' +
    "  createdAt: '2020-08-21T08:33:20.711Z',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  updatedAt: '2022-02-01T14:38:10.605Z',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    '  deprecated: true,\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  versionName: 'Selector',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '} with unit config => {\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  name: 'Selector',\n" +
    "  description: '',\n" +
    "  outputRef: 'selector_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: false,\n' +
    "    selectors: 'http_client_1.user_id'\n" +
    '  },\n' +
    "  uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    "  serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  parentUnitUniqueId: [ 'f9b3d66f-a032-4212-91bb-7a9d32299546' ],\n" +
    '  input: {\n' +
    '    _execution: {\n' +
    "      _id: '63dc83a4b1410e2479903207',\n" +
    "      tenantId: 'backflipt.com',\n" +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '      testRun: false,\n' +
    "      unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '      startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '      lastRun: [Object]\n' +
    '    },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://slack.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      tokenType: 'bot',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: false\n' +
    '    },\n' +
    '    requiresAuthentication: true,\n' +
    "    result: { ok: false, error: 'not_authed' },\n" +
    "    http_client_1: { ok: false, error: 'not_authed' }\n" +
    '  }\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.470Z',
  log: 'module key:  [\n' +
    "  '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  '5ee8ffe42d14f70c922c4192',\n" +
    "  '2022-02-01T14:38:10.605Z',\n" +
    "  'Selector'\n" +
    ']',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.479Z',
  log: 'module for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  module  { run: [AsyncFunction: run] }',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.482Z',
  log: 'module Run Output for unit id 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  =>   null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.482Z',
  log: 'running simple unit for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  complete.',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.482Z',
  log: 'executing unit complete for unit unique id  a6c177aa-d489-4ba4-b705-60770f5f8a7a',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.483Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396008726\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.484Z',
  log: ' Result  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.487Z',
  log: 'executing unit complete for unit unique id  f9b3d66f-a032-4212-91bb-7a9d32299546',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.488Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396008726,\n' +
    '      output: null,\n' +
    '      endTime: 1675396010486,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.489Z',
  log: ' Result  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.740Z',
  log: 'before executing: 5f8463f4dad3d80fb37bf739 Microsoft Teams microsoft_teams_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.741Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.741Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.743Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Get My UserInfo',\n" +
    "  integrationId: '5f8463cedad3d80fb37bf738',\n" +
    "  type: 'SERIAL',\n" +
    "  updatedBy: 'hithesh@backflipt.com',\n" +
    "  createdBy: 'hithesh@backflipt.com',\n" +
    "  createdAt: '2020-10-12T14:11:00.396Z',\n" +
    "  updatedAt: '2021-07-20T08:03:47.572Z',\n" +
    '  __v: 0,\n' +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '8144a15c-3a14-4333-b155-6c9f52703437',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      versionId: '5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',\n" +
    "      category: 'ENTITY_OPERATION'\n" +
    '    }\n' +
    '  ],\n' +
    "  unitId: '5f8463f4dad3d80fb37bf739',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7',\n" +
    "  versionName: 'Get My UserInfo',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '}  uc {\n' +
    "  integrationId: '5f8463cedad3d80fb37bf738',\n" +
    "  name: 'Microsoft Teams',\n" +
    "  description: '',\n" +
    "  outputRef: 'microsoft_teams_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f8463cedad3d80fb37bf738',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    "  unitId: '5f8463f4dad3d80fb37bf739',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: null,\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  slack_1: null\n' +
    '}  trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396008726,\n' +
    '      output: null,\n' +
    '      endTime: 1675396010486,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.745Z',
  log: 'Running unit for unit id 5f8463f4dad3d80fb37bf739  with versionId 5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7  unit name Get My UserInfo  with unit type SERIAL',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.745Z',
  log: ' updating trace for unit uniqueId   8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.747Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396008726,\n' +
    '      output: null,\n' +
    '      endTime: 1675396010486,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    '      running: true,\n' +
    '      startTime: 1675396010745\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:50.750Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.522Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.525Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: null,\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  slack_1: null,\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5f50d2d7d5caef7e89622c6e',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlRnamd2ZGxnaWctQUlNVjdQOHVKQWVMRU9DZTktdkJEa2VRbjdPYlkycFEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwOTEyMTEwLCJuYmYiOjE2NzA5MTIxMTAsImV4cCI6MTY3MDkxNjk0NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQWtiZUdyRlFQbkxUYkV1QVgwYjJ4RUgxU0pya0o4UHBSVVlxeEU5c1E1d3JSS0RGOHo1UmtyZ2FXb2FHeVl5RHhlY1hzZGNneittaW9qQzBzWUFMV0s5dDlOOG8vejBBMEJTUnpCY0VHRUZrPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiVGVhbXMgZm9yIEJhY2tmbGlwdCBGbG93IE1hbmFnZXIiLCJhcHBpZCI6IjFiYzExNWExLTJkZDYtNGY3Mi04MTZmLTk5YjEwMDg1MjFkYyIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiTXV0aHlhbGEiLCJnaXZlbl9uYW1lIjoiUGF2YW4gU2FuZGVlcCIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjQ5LjM3LjEzMC4yMzYiLCJuYW1lIjoiUGF2YW4gU2FuZGVlcCAgTXV0aHlhbGEiLCJvaWQiOiI3MWQyZDU4Ny0zZDZjLTRjY2MtOTc1YS02ZWFjN2I2NDI0M2QiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtNzc2MTgyMjQzLTExMjg4MTMxOTQtMzI0MTI0OTIzMC0xMTI2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAwNEY3NkY5OTAiLCJyaCI6IjAuQVJjQXI4UDd0aFpHbVVpcmZmbWRHUmY4MWdNQUFBQUFBQUFBd0FBQUFBQUFBQUFYQUVZLiIsInNjcCI6IkNoYW5uZWwuUmVhZEJhc2ljLkFsbCBDaGFubmVsTWVzc2FnZS5SZWFkLkFsbCBDaGF0LlJlYWRXcml0ZSBDaGF0TWVzc2FnZS5TZW5kIGVtYWlsIEdyb3VwLlJlYWRXcml0ZS5BbGwgb2ZmbGluZV9hY2Nlc3MgVXNlci5SZWFkIFVzZXIuUmVhZC5BbGwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJ6d0tseGc5elV6WUZVRWJiOHVpb2ZDMTRoZlFFZTFEOFp3cDRhejhNWmowIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6Ik5BIiwidGlkIjoiYjZmYmMzYWYtNDYxNi00ODk5LWFiN2QtZjk5ZDE5MTdmY2Q2IiwidW5pcXVlX25hbWUiOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInVwbiI6InBhdmFuc2FuZGVlcEBiYWNrZmxpcHQuY29tIiwidXRpIjoiRXJhZFZ5Umk0ay1pbEdNN21WZktBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc190Y2R0IjoxNDUyMTc4NDcwfQ.ZazPtygamZKZpwczlT2YGmE9gwZsamuF7-BULj3PbnQ5TFVEbGAudb8JRU8y5AbehB4Gj0MQ3hBofCBQX6aV-FDy04xo_RCdLNwH2L7g9QwssaqOWoHvklzgVTmCz47SUncQLVOXMWLBK8gV998tbJyD4OpKZYcob1opjM6iFfZbdyGfqbbe8PmAPjOe_OeHzKafCY-Bfx8TDwdzV_xo-zsmCUVz-gXp_99yXd135jCd4lRRJfDI1CYtgJ2LVPLP9vQVMWBjY_ZJtU3JXV5mKx2LYrVNYSo6pUnfpd3dvE6o4jxdIcQNGwAoVRnILsbuzz5oyXLxgwmzRSZHzNjPQA',\n" +
    "    idToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIxYmMxMTVhMS0yZGQ2LTRmNzItODE2Zi05OWIxMDA4NTIxZGMiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwNDI0ODczLCJuYmYiOjE2NzA0MjQ4NzMsImV4cCI6MTY3MDQyODc3MywiYW1yIjpbInB3ZCIsIm1mYSJdLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInJoIjoiMC5BUmNBcjhQN3RoWkdtVWlyZmZtZEdSZjgxcUVWd1J2V0xYSlBnVy1ac1FDRklkd1hBRVkuIiwic3ViIjoid19NeFRCVmg5Rzk1X3FDYWJQRmJwS0JCalBQWTBfLWtHQTl1TTQxOXZTbyIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInZlciI6IjEuMCJ9.',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'Channel.ReadBasic.All ChannelMessage.Read.All Chat.ReadWrite ChatMessage.Send email Group.ReadWrite.All offline_access User.Read User.Read.All',\n" +
    "      expires_in: '4534',\n" +
    "      ext_expires_in: '4534',\n" +
    "      expires_on: '1670916945',\n" +
    "      not_before: '1670912110',\n" +
    "      resource: '00000003-0000-0000-c000-000000000000',\n" +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlRnamd2ZGxnaWctQUlNVjdQOHVKQWVMRU9DZTktdkJEa2VRbjdPYlkycFEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwOTEyMTEwLCJuYmYiOjE2NzA5MTIxMTAsImV4cCI6MTY3MDkxNjk0NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQWtiZUdyRlFQbkxUYkV1QVgwYjJ4RUgxU0pya0o4UHBSVVlxeEU5c1E1d3JSS0RGOHo1UmtyZ2FXb2FHeVl5RHhlY1hzZGNneittaW9qQzBzWUFMV0s5dDlOOG8vejBBMEJTUnpCY0VHRUZrPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiVGVhbXMgZm9yIEJhY2tmbGlwdCBGbG93IE1hbmFnZXIiLCJhcHBpZCI6IjFiYzExNWExLTJkZDYtNGY3Mi04MTZmLTk5YjEwMDg1MjFkYyIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiTXV0aHlhbGEiLCJnaXZlbl9uYW1lIjoiUGF2YW4gU2FuZGVlcCIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjQ5LjM3LjEzMC4yMzYiLCJuYW1lIjoiUGF2YW4gU2FuZGVlcCAgTXV0aHlhbGEiLCJvaWQiOiI3MWQyZDU4Ny0zZDZjLTRjY2MtOTc1YS02ZWFjN2I2NDI0M2QiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtNzc2MTgyMjQzLTExMjg4MTMxOTQtMzI0MTI0OTIzMC0xMTI2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAwNEY3NkY5OTAiLCJyaCI6IjAuQVJjQXI4UDd0aFpHbVVpcmZmbWRHUmY4MWdNQUFBQUFBQUFBd0FBQUFBQUFBQUFYQUVZLiIsInNjcCI6IkNoYW5uZWwuUmVhZEJhc2ljLkFsbCBDaGFubmVsTWVzc2FnZS5SZWFkLkFsbCBDaGF0LlJlYWRXcml0ZSBDaGF0TWVzc2FnZS5TZW5kIGVtYWlsIEdyb3VwLlJlYWRXcml0ZS5BbGwgb2ZmbGluZV9hY2Nlc3MgVXNlci5SZWFkIFVzZXIuUmVhZC5BbGwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJ6d0tseGc5elV6WUZVRWJiOHVpb2ZDMTRoZlFFZTFEOFp3cDRhejhNWmowIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6Ik5BIiwidGlkIjoiYjZmYmMzYWYtNDYxNi00ODk5LWFiN2QtZjk5ZDE5MTdmY2Q2IiwidW5pcXVlX25hbWUiOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInVwbiI6InBhdmFuc2FuZGVlcEBiYWNrZmxpcHQuY29tIiwidXRpIjoiRXJhZFZ5Umk0ay1pbEdNN21WZktBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc190Y2R0IjoxNDUyMTc4NDcwfQ.ZazPtygamZKZpwczlT2YGmE9gwZsamuF7-BULj3PbnQ5TFVEbGAudb8JRU8y5AbehB4Gj0MQ3hBofCBQX6aV-FDy04xo_RCdLNwH2L7g9QwssaqOWoHvklzgVTmCz47SUncQLVOXMWLBK8gV998tbJyD4OpKZYcob1opjM6iFfZbdyGfqbbe8PmAPjOe_OeHzKafCY-Bfx8TDwdzV_xo-zsmCUVz-gXp_99yXd135jCd4lRRJfDI1CYtgJ2LVPLP9vQVMWBjY_ZJtU3JXV5mKx2LYrVNYSo6pUnfpd3dvE6o4jxdIcQNGwAoVRnILsbuzz5oyXLxgwmzRSZHzNjPQA',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81qEVwRvWLXJPgW-ZsQCFIdwXAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wQA9P8I0zr6UK75EgwCXyyI2LvkqneAzR7yNulL3bi_xCfQElLEFUVI-DZBuLBBX2i0siWu0c4nDCtvpsJgc2TQAUL9mqDIGH_9CFqF-aGQoKRvGdZrqrrwWZXgsjHtTzs8so14vamhtbMOjQ9lZgZe-jAPJu-rQhAlosPhhYeCDT8k3UlydLcnDw76aniv2JLGjM8RwoCfxJ-8KtAc4eYTIVbAcssSwSHn0Z4q_sS7QmdQp8tRlIniDeW3EfdYY_5FddeXEUQCLl3mFt9HBR7diAD1fAaZ-DhRcmjKgAzNxYfk9Cq_tF0nkEpr80fEe_oy1p5IHDIAEDmXrqdYJKNeJGd1CvIu4_JWgvlu_lhwOPLheEWjW5p46EVolz0HSkylOUhqBoTvOtSNaqGGP_7yi_kUiEEpailrSaS9IplxskJY37NUn4MkFhYsEhUaRlNDxQG6n3MwKUVjMlA5h1ifLFtAAqYp5SIOpQlakoKVBe8GLHyEjFLq4JSgL8NV46Wr1JxzzFiy9Cpm5p-GPmmFGNwgbk96x_xbLDVbEKxga1dfCVsJoNBXShd76JPLVSedromJWxazJA1xryJjlflrEGX1WoeLQWj9enBH4tfd9Hocw8MN669ILEHoPHVICd6VjRzDcC538WFRUAIwzCOQGktAH6w0bbbp7FK4HtkCCKvB6Hvjgg2OTSM2kNQFKq9RjAWvILO4K3MVOpr3A3Nzk3xT1OITT0WbTrSDuy6LFg_k8mj-W8UouAdOt72ECLkSItSmncb_SKlwQUec28yfW2EmZlYlOd3iVtv9LDwf6ZceoZtC87vwvTg451Q9KpPx46BpSTim39_D38t7VgurxCZqMtKxNVo9CrCB-AC72OuYdTGPj6B-AKx0NKxNAhaKTfbAur-_Gi8M45fDJyWJ6Q3Ka9U'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.527Z',
  log: 'parser empty',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.762Z',
  log: 'before executing: 5f47ad711995ad4d4db2f05e Http Client http_client_1',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.764Z',
  log: 'Unit execution started',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.765Z',
  log: 'authVariables: {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.774Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Http Call 1.0',\n" +
    "  description: 'Makes request to URL',\n" +
    "  inputGUISchema: '[\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "uri",\\r\\n' +\n` +
    `    '\\t\\t"label": "URL",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "TEMPLATE",\\r\\n' +\n` +
    `    '\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"uiType": "TEXTAREA"\\r\\n' +\n` +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "decodeURI",\\r\\n' +\n` +
    `    '\\t\\t"label": "Decode URI",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "CHECKBOX"\\r\\n' +\n` +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "method",\\r\\n' +\n` +
    `    '\\t\\t"label": "Method",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "GET",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "GET",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "GET"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "POST",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "POST"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "DELETE",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "DELETE"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "PUT",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "PUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "OPTIONS",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "OPTIONS"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "PATCH",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "PATCH"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "headers",\\r\\n' +\n` +
    `    '\\t\\t"label": "Headers",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Header",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "qs",\\r\\n' +\n` +
    `    '\\t\\t"label": "Query String",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Param",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "contentType",\\r\\n' +\n` +
    `    '\\t\\t"label": "Content Type",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "application/json",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Application JSON",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "application/json"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Form",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "application/x-www-form-urlencoded"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Multipart Form",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "multipart/form-data"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "body",\\r\\n' +\n` +
    `    '\\t\\t"label": "Body",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "JSON_PATH",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Param",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Name",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "responseType",\\r\\n' +\n` +
    `    '\\t\\t"label": "Response Type",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "JSON",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Binary",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "BINARY"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "JSON",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "JSON"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "HTML",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "HTML"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Text",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "TEXT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t}\\r\\n' +\n" +
    "    ']',\n" +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    "    '        // options.form = typeof(_confi"... 15689 more characters,
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.777Z',
  log: 'Running unit for unit id 5f47ad711995ad4d4db2f05e  with versionId 5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4  unit name Http Call 1.0  with unit type SIMPLE',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.777Z',
  log: ' updating trace for unit uniqueId   8144a15c-3a14-4333-b155-6c9f52703437',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.781Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] },\n" +
    "    '5f8463cedad3d80fb37bf738': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc83a4b1410e2479903207',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396008726,\n' +
    '      output: null,\n' +
    '      endTime: 1675396010486,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    '      running: true,\n' +
    '      startTime: 1675396010745\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '8144a15c-3a14-4333-b155-6c9f52703437',\n" +
    '      running: true,\n' +
    '      startTime: 1675396011777,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8463f4dad3d80fb37bf739',\n" +
    "      serviceVersionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.784Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.785Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.790Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'TEMPLATE' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'JSON_PATH' },\n" +
    "  responseType: { type: 'USER_INPUT' },\n" +
    "  body: { type: 'JSON_PATH' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc83a4b1410e2479903207',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5f50d2d7d5caef7e89622c6e',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlRnamd2ZGxnaWctQUlNVjdQOHVKQWVMRU9DZTktdkJEa2VRbjdPYlkycFEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwOTEyMTEwLCJuYmYiOjE2NzA5MTIxMTAsImV4cCI6MTY3MDkxNjk0NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQWtiZUdyRlFQbkxUYkV1QVgwYjJ4RUgxU0pya0o4UHBSVVlxeEU5c1E1d3JSS0RGOHo1UmtyZ2FXb2FHeVl5RHhlY1hzZGNneittaW9qQzBzWUFMV0s5dDlOOG8vejBBMEJTUnpCY0VHRUZrPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiVGVhbXMgZm9yIEJhY2tmbGlwdCBGbG93IE1hbmFnZXIiLCJhcHBpZCI6IjFiYzExNWExLTJkZDYtNGY3Mi04MTZmLTk5YjEwMDg1MjFkYyIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiTXV0aHlhbGEiLCJnaXZlbl9uYW1lIjoiUGF2YW4gU2FuZGVlcCIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjQ5LjM3LjEzMC4yMzYiLCJuYW1lIjoiUGF2YW4gU2FuZGVlcCAgTXV0aHlhbGEiLCJvaWQiOiI3MWQyZDU4Ny0zZDZjLTRjY2MtOTc1YS02ZWFjN2I2NDI0M2QiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtNzc2MTgyMjQzLTExMjg4MTMxOTQtMzI0MTI0OTIzMC0xMTI2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAwNEY3NkY5OTAiLCJyaCI6IjAuQVJjQXI4UDd0aFpHbVVpcmZmbWRHUmY4MWdNQUFBQUFBQUFBd0FBQUFBQUFBQUFYQUVZLiIsInNjcCI6IkNoYW5uZWwuUmVhZEJhc2ljLkFsbCBDaGFubmVsTWVzc2FnZS5SZWFkLkFsbCBDaGF0LlJlYWRXcml0ZSBDaGF0TWVzc2FnZS5TZW5kIGVtYWlsIEdyb3VwLlJlYWRXcml0ZS5BbGwgb2ZmbGluZV9hY2Nlc3MgVXNlci5SZWFkIFVzZXIuUmVhZC5BbGwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJ6d0tseGc5elV6WUZVRWJiOHVpb2ZDMTRoZlFFZTFEOFp3cDRhejhNWmowIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6Ik5BIiwidGlkIjoiYjZmYmMzYWYtNDYxNi00ODk5LWFiN2QtZjk5ZDE5MTdmY2Q2IiwidW5pcXVlX25hbWUiOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInVwbiI6InBhdmFuc2FuZGVlcEBiYWNrZmxpcHQuY29tIiwidXRpIjoiRXJhZFZ5Umk0ay1pbEdNN21WZktBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc190Y2R0IjoxNDUyMTc4NDcwfQ.ZazPtygamZKZpwczlT2YGmE9gwZsamuF7-BULj3PbnQ5TFVEbGAudb8JRU8y5AbehB4Gj0MQ3hBofCBQX6aV-FDy04xo_RCdLNwH2L7g9QwssaqOWoHvklzgVTmCz47SUncQLVOXMWLBK8gV998tbJyD4OpKZYcob1opjM6iFfZbdyGfqbbe8PmAPjOe_OeHzKafCY-Bfx8TDwdzV_xo-zsmCUVz-gXp_99yXd135jCd4lRRJfDI1CYtgJ2LVPLP9vQVMWBjY_ZJtU3JXV5mKx2LYrVNYSo6pUnfpd3dvE6o4jxdIcQNGwAoVRnILsbuzz5oyXLxgwmzRSZHzNjPQA',\n" +
    "    idToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIxYmMxMTVhMS0yZGQ2LTRmNzItODE2Zi05OWIxMDA4NTIxZGMiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwNDI0ODczLCJuYmYiOjE2NzA0MjQ4NzMsImV4cCI6MTY3MDQyODc3MywiYW1yIjpbInB3ZCIsIm1mYSJdLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInJoIjoiMC5BUmNBcjhQN3RoWkdtVWlyZmZtZEdSZjgxcUVWd1J2V0xYSlBnVy1ac1FDRklkd1hBRVkuIiwic3ViIjoid19NeFRCVmg5Rzk1X3FDYWJQRmJwS0JCalBQWTBfLWtHQTl1TTQxOXZTbyIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInZlciI6IjEuMCJ9.',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'Channel.ReadBasic.All ChannelMessage.Read.All Chat.ReadWrite ChatMessage.Send email Group.ReadWrite.All offline_access User.Read User.Read.All',\n" +
    "      expires_in: '4534',\n" +
    "      ext_expires_in: '4534',\n" +
    "      expires_on: '1670916945',\n" +
    "      not_before: '1670912110',\n" +
    "      resource: '00000003-0000-0000-c000-000000000000',\n" +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlRnamd2ZGxnaWctQUlNVjdQOHVKQWVMRU9DZTktdkJEa2VRbjdPYlkycFEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwOTEyMTEwLCJuYmYiOjE2NzA5MTIxMTAsImV4cCI6MTY3MDkxNjk0NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQWtiZUdyRlFQbkxUYkV1QVgwYjJ4RUgxU0pya0o4UHBSVVlxeEU5c1E1d3JSS0RGOHo1UmtyZ2FXb2FHeVl5RHhlY1hzZGNneittaW9qQzBzWUFMV0s5dDlOOG8vejBBMEJTUnpCY0VHRUZrPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiVGVhbXMgZm9yIEJhY2tmbGlwdCBGbG93IE1hbmFnZXIiLCJhcHBpZCI6IjFiYzExNWExLTJkZDYtNGY3Mi04MTZmLTk5YjEwMDg1MjFkYyIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiTXV0aHlhbGEiLCJnaXZlbl9uYW1lIjoiUGF2YW4gU2FuZGVlcCIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjQ5LjM3LjEzMC4yMzYiLCJuYW1lIjoiUGF2YW4gU2FuZGVlcCAgTXV0aHlhbGEiLCJvaWQiOiI3MWQyZDU4Ny0zZDZjLTRjY2MtOTc1YS02ZWFjN2I2NDI0M2QiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtNzc2MTgyMjQzLTExMjg4MTMxOTQtMzI0MTI0OTIzMC0xMTI2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAwNEY3NkY5OTAiLCJyaCI6IjAuQVJjQXI4UDd0aFpHbVVpcmZmbWRHUmY4MWdNQUFBQUFBQUFBd0FBQUFBQUFBQUFYQUVZLiIsInNjcCI6IkNoYW5uZWwuUmVhZEJhc2ljLkFsbCBDaGFubmVsTWVzc2FnZS5SZWFkLkFsbCBDaGF0LlJlYWRXcml0ZSBDaGF0TWVzc2FnZS5TZW5kIGVtYWlsIEdyb3VwLlJlYWRXcml0ZS5BbGwgb2ZmbGluZV9hY2Nlc3MgVXNlci5SZWFkIFVzZXIuUmVhZC5BbGwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJ6d0tseGc5elV6WUZVRWJiOHVpb2ZDMTRoZlFFZTFEOFp3cDRhejhNWmowIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6Ik5BIiwidGlkIjoiYjZmYmMzYWYtNDYxNi00ODk5LWFiN2QtZjk5ZDE5MTdmY2Q2IiwidW5pcXVlX25hbWUiOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInVwbiI6InBhdmFuc2FuZGVlcEBiYWNrZmxpcHQuY29tIiwidXRpIjoiRXJhZFZ5Umk0ay1pbEdNN21WZktBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc190Y2R0IjoxNDUyMTc4NDcwfQ.ZazPtygamZKZpwczlT2YGmE9gwZsamuF7-BULj3PbnQ5TFVEbGAudb8JRU8y5AbehB4Gj0MQ3hBofCBQX6aV-FDy04xo_RCdLNwH2L7g9QwssaqOWoHvklzgVTmCz47SUncQLVOXMWLBK8gV998tbJyD4OpKZYcob1opjM6iFfZbdyGfqbbe8PmAPjOe_OeHzKafCY-Bfx8TDwdzV_xo-zsmCUVz-gXp_99yXd135jCd4lRRJfDI1CYtgJ2LVPLP9vQVMWBjY_ZJtU3JXV5mKx2LYrVNYSo6pUnfpd3dvE6o4jxdIcQNGwAoVRnILsbuzz5oyXLxgwmzRSZHzNjPQA',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81qEVwRvWLXJPgW-ZsQCFIdwXAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wQA9P8I0zr6UK75EgwCXyyI2LvkqneAzR7yNulL3bi_xCfQElLEFUVI-DZBuLBBX2i0siWu0c4nDCtvpsJgc2TQAUL9mqDIGH_9CFqF-aGQoKRvGdZrqrrwWZXgsjHtTzs8so14vamhtbMOjQ9lZgZe-jAPJu-rQhAlosPhhYeCDT8k3UlydLcnDw76aniv2JLGjM8RwoCfxJ-8KtAc4eYTIVbAcssSwSHn0Z4q_sS7QmdQp8tRlIniDeW3EfdYY_5FddeXEUQCLl3mFt9HBR7diAD1fAaZ-DhRcmjKgAzNxYfk9Cq_tF0nkEpr80fEe_oy1p5IHDIAEDmXrqdYJKNeJGd1CvIu4_JWgvlu_lhwOPLheEWjW5p46EVolz0HSkylOUhqBoTvOtSNaqGGP_7yi_kUiEEpailrSaS9IplxskJY37NUn4MkFhYsEhUaRlNDxQG6n3MwKUVjMlA5h1ifLFtAAqYp5SIOpQlakoKVBe8GLHyEjFLq4JSgL8NV46Wr1JxzzFiy9Cpm5p-GPmmFGNwgbk96x_xbLDVbEKxga1dfCVsJoNBXShd76JPLVSedromJWxazJA1xryJjlflrEGX1WoeLQWj9enBH4tfd9Hocw8MN669ILEHoPHVICd6VjRzDcC538WFRUAIwzCOQGktAH6w0bbbp7FK4HtkCCKvB6Hvjgg2OTSM2kNQFKq9RjAWvILO4K3MVOpr3A3Nzk3xT1OITT0WbTrSDuy6LFg_k8mj-W8UouAdOt72ECLkSItSmncb_SKlwQUec28yfW2EmZlYlOd3iVtv9LDwf6ZceoZtC87vwvTg451Q9KpPx46BpSTim39_D38t7VgurxCZqMtKxNVo9CrCB-AC72OuYdTGPj6B-AKx0NKxNAhaKTfbAur-_Gi8M45fDJyWJ6Q3Ka9U'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.796Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body', 'type' ], value: 'JSON_PATH' }\n" +
    ']',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.797Z',
  log: 'TransformedInput  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.797Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.797Z',
  log: 'valuePath => uri',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.797Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.798Z',
  log: ' value from input for value path => uri  is  {{{_auth.baseUri}}}/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.802Z',
  log: ' value after compile input  => https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.802Z',
  log: ' setting value for valuePath  uri  with value  https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.804Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.804Z',
  log: 'valuePath => method',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.805Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.807Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.807Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.807Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.808Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.809Z',
  log: 'valuePath => contentType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.809Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.809Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.809Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.810Z',
  log: ' value from input for value path => body_multiValue  is  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.810Z',
  log: ' value from data  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: ' setting value for valuePath  body_multiValue  with value  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: 'valuePath => responseType',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: "node => { path: [ 'body', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: 'valuePath => body',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: ' value from input for value path => body  is  ',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: ' value from data  => null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.811Z',
  log: ' setting value for valuePath  body  with value  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.812Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.812Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.812Z',
  log: 'running simple unit for unitId 5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.824Z',
  log: 'running simple unit for unit {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Http Call 1.0',\n" +
    "  description: 'Makes request to URL',\n" +
    "  inputGUISchema: '[\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "uri",\\r\\n' +\n` +
    `    '\\t\\t"label": "URL",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "TEMPLATE",\\r\\n' +\n` +
    `    '\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"uiType": "TEXTAREA"\\r\\n' +\n` +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "decodeURI",\\r\\n' +\n` +
    `    '\\t\\t"label": "Decode URI",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "CHECKBOX"\\r\\n' +\n` +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "method",\\r\\n' +\n` +
    `    '\\t\\t"label": "Method",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "GET",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "GET",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "GET"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "POST",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "POST"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "DELETE",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "DELETE"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "PUT",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "PUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "OPTIONS",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "OPTIONS"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "PATCH",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "PATCH"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "headers",\\r\\n' +\n` +
    `    '\\t\\t"label": "Headers",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Header",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "qs",\\r\\n' +\n` +
    `    '\\t\\t"label": "Query String",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Param",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": true,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "contentType",\\r\\n' +\n` +
    `    '\\t\\t"label": "Content Type",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "application/json",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Application JSON",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "application/json"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Form",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "application/x-www-form-urlencoded"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Multipart Form",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "multipart/form-data"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "body",\\r\\n' +\n` +
    `    '\\t\\t"label": "Body",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "JSON_PATH",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": true,\\r\\n' +\n` +
    `    '\\t\\t"valueLabel": "Param",\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "OBJECT",\\r\\n' +\n` +
    `    '\\t\\t"keyValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "key",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Name",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"key": "value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"label": "Value",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"defaultValue": "",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"uiType": "INPUT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t},\\r\\n' +\n" +
    "    '\\t{\\r\\n' +\n" +
    `    '\\t\\t"key": "responseType",\\r\\n' +\n` +
    `    '\\t\\t"label": "Response Type",\\r\\n' +\n` +
    `    '\\t\\t"defaultParser": "",\\r\\n' +\n` +
    `    '\\t\\t"required": false,\\r\\n' +\n` +
    `    '\\t\\t"multiValue": false,\\r\\n' +\n` +
    `    '\\t\\t"defaultValue": "JSON",\\r\\n' +\n` +
    `    '\\t\\t"dependsOn": null,\\r\\n' +\n` +
    `    '\\t\\t"uiType": "DD",\\r\\n' +\n` +
    `    '\\t\\t"multiSelect": false,\\r\\n' +\n` +
    `    '\\t\\t"pickListValues": [\\r\\n' +\n` +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Binary",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "BINARY"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "JSON",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "JSON"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "HTML",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "HTML"\\r\\n' +\n` +
    "    '\\t\\t\\t},\\r\\n' +\n" +
    "    '\\t\\t\\t{\\r\\n' +\n" +
    `    '\\t\\t\\t\\t"label": "Text",\\r\\n' +\n` +
    `    '\\t\\t\\t\\t"value": "TEXT"\\r\\n' +\n` +
    "    '\\t\\t\\t}\\r\\n' +\n" +
    "    '\\t\\t]\\r\\n' +\n" +
    "    '\\t}\\r\\n' +\n" +
    "    ']',\n" +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    `    '        // options.form = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _conf`... 9953 more characters,
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.827Z',
  log: 'module key:  [\n' +
    "  '5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',\n" +
    "  '5f47ad711995ad4d4db2f05e',\n" +
    "  '2023-01-04T10:32:48.637Z',\n" +
    "  'Http Call 1.0'\n" +
    ']',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.829Z',
  log: 'module for unitId 5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4  module  [AsyncFunction: run]',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:51.997Z',
  log: 'Error while running unit:  5f47ad711995ad4d4db2f05e Http Call 1.0 {\n' +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  name: 'Http Client',\n" +
    "  description: 'Makes requests to web services using HTTP protocol',\n" +
    "  outputRef: 'http_client_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f8463cedad3d80fb37bf738',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '8144a15c-3a14-4333-b155-6c9f52703437',\n" +
    "  inputDataKey: '',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '  parser: {\n' +
    "    uri: { type: 'TEMPLATE' },\n" +
    "    method: { type: 'USER_INPUT' },\n" +
    "    headers_multiValue: { type: 'USER_INPUT' },\n" +
    "    qs_multiValue: { type: 'USER_INPUT' },\n" +
    "    contentType: { type: 'USER_INPUT' },\n" +
    "    body_multiValue: { type: 'JSON_PATH' },\n" +
    "    responseType: { type: 'USER_INPUT' },\n" +
    "    body: { type: 'JSON_PATH' }\n" +
    '  },\n' +
    '  input: {\n' +
    "    uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    "    method: 'GET',\n" +
    "    headers: '',\n" +
    "    qs: '',\n" +
    "    contentType: 'application/json',\n" +
    '    body: null,\n' +
    "    responseType: 'JSON',\n" +
    '    body_multiValue: null,\n' +
    '    _execution: {\n' +
    "      _id: '63dc83a4b1410e2479903207',\n" +
    "      tenantId: 'backflipt.com',\n" +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      versionId: '63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',\n" +
    '      testRun: false,\n' +
    "      unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '      startedAt: 2023-02-03T03:46:45.948Z,\n' +
    '      lastRun: [Object]\n' +
    '    },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '5f50d2d7d5caef7e89622c6e',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://graph.microsoft.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlRnamd2ZGxnaWctQUlNVjdQOHVKQWVMRU9DZTktdkJEa2VRbjdPYlkycFEiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwOTEyMTEwLCJuYmYiOjE2NzA5MTIxMTAsImV4cCI6MTY3MDkxNjk0NSwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQWtiZUdyRlFQbkxUYkV1QVgwYjJ4RUgxU0pya0o4UHBSVVlxeEU5c1E1d3JSS0RGOHo1UmtyZ2FXb2FHeVl5RHhlY1hzZGNneittaW9qQzBzWUFMV0s5dDlOOG8vejBBMEJTUnpCY0VHRUZrPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiVGVhbXMgZm9yIEJhY2tmbGlwdCBGbG93IE1hbmFnZXIiLCJhcHBpZCI6IjFiYzExNWExLTJkZDYtNGY3Mi04MTZmLTk5YjEwMDg1MjFkYyIsImFwcGlkYWNyIjoiMSIsImZhbWlseV9uYW1lIjoiTXV0aHlhbGEiLCJnaXZlbl9uYW1lIjoiUGF2YW4gU2FuZGVlcCIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjQ5LjM3LjEzMC4yMzYiLCJuYW1lIjoiUGF2YW4gU2FuZGVlcCAgTXV0aHlhbGEiLCJvaWQiOiI3MWQyZDU4Ny0zZDZjLTRjY2MtOTc1YS02ZWFjN2I2NDI0M2QiLCJvbnByZW1fc2lkIjoiUy0xLTUtMjEtNzc2MTgyMjQzLTExMjg4MTMxOTQtMzI0MTI0OTIzMC0xMTI2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDMyMDAwNEY3NkY5OTAiLCJyaCI6IjAuQVJjQXI4UDd0aFpHbVVpcmZmbWRHUmY4MWdNQUFBQUFBQUFBd0FBQUFBQUFBQUFYQUVZLiIsInNjcCI6IkNoYW5uZWwuUmVhZEJhc2ljLkFsbCBDaGFubmVsTWVzc2FnZS5SZWFkLkFsbCBDaGF0LlJlYWRXcml0ZSBDaGF0TWVzc2FnZS5TZW5kIGVtYWlsIEdyb3VwLlJlYWRXcml0ZS5BbGwgb2ZmbGluZV9hY2Nlc3MgVXNlci5SZWFkIFVzZXIuUmVhZC5BbGwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJ6d0tseGc5elV6WUZVRWJiOHVpb2ZDMTRoZlFFZTFEOFp3cDRhejhNWmowIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6Ik5BIiwidGlkIjoiYjZmYmMzYWYtNDYxNi00ODk5LWFiN2QtZjk5ZDE5MTdmY2Q2IiwidW5pcXVlX25hbWUiOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInVwbiI6InBhdmFuc2FuZGVlcEBiYWNrZmxpcHQuY29tIiwidXRpIjoiRXJhZFZ5Umk0ay1pbEdNN21WZktBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc190Y2R0IjoxNDUyMTc4NDcwfQ.ZazPtygamZKZpwczlT2YGmE9gwZsamuF7-BULj3PbnQ5TFVEbGAudb8JRU8y5AbehB4Gj0MQ3hBofCBQX6aV-FDy04xo_RCdLNwH2L7g9QwssaqOWoHvklzgVTmCz47SUncQLVOXMWLBK8gV998tbJyD4OpKZYcob1opjM6iFfZbdyGfqbbe8PmAPjOe_OeHzKafCY-Bfx8TDwdzV_xo-zsmCUVz-gXp_99yXd135jCd4lRRJfDI1CYtgJ2LVPLP9vQVMWBjY_ZJtU3JXV5mKx2LYrVNYSo6pUnfpd3dvE6o4jxdIcQNGwAoVRnILsbuzz5oyXLxgwmzRSZHzNjPQA',\n" +
    "      idToken: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIxYmMxMTVhMS0yZGQ2LTRmNzItODE2Zi05OWIxMDA4NTIxZGMiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjcwNDI0ODczLCJuYmYiOjE2NzA0MjQ4NzMsImV4cCI6MTY3MDQyODc3MywiYW1yIjpbInB3ZCIsIm1mYSJdLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInJoIjoiMC5BUmNBcjhQN3RoWkdtVWlyZmZtZEdSZjgxcUVWd1J2V0xYSlBnVy1ac1FDRklkd1hBRVkuIiwic3ViIjoid19NeFRCVmg5Rzk1X3FDYWJQRmJwS0JCalBQWTBfLWtHQTl1TTQxOXZTbyIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInZlciI6IjEuMCJ9.',\n" +
    "      tokenType: 'Bearer',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: true\n' +
    '    },\n' +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_62bdd6331a2a1fd88ca9b3e4',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    "  serviceId: '5f8463f4dad3d80fb37bf739',\n" +
    "  serviceVersionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7',\n" +
    "  parentUnitUniqueId: [ '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242' ]\n" +
    '} {\n' +
    '  error: {\n' +
    "    code: 'InvalidAuthenticationToken',\n" +
    "    message: 'Access token has expired or is not yet valid.',\n" +
    '    innerError: {\n' +
    "      date: '2023-02-03T03:46:54',\n" +
    "      'request-id': '918ac5bd-1e1f-4ce0-9f27-a5c208dc48e1',\n" +
    "      'client-request-id': '918ac5bd-1e1f-4ce0-9f27-a5c208dc48e1'\n" +
    '    }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: 'logErrorTrace : Error while executing unit with unique id  8144a15c-3a14-4333-b155-6c9f52703437',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: ' logErrorTrace : unit uniqueId  TRIGGER  startTime  1675396005166  success  true  endTime  1675396005166',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: ' logErrorTrace : unit uniqueId  TRIGGER  input  {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: " logErrorTrace : unit uniqueId  TRIGGER  output  { category: 'FLOW', type: 'MANUAL' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  startTime  1675396005960  success  true  endTime  1675396008487',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.001Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  input  {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.002Z',
  log: ' logErrorTrace : unit uniqueId  d026a99e-65be-4f01-82fb-b1fe64a676c0  output  {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.002Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  startTime  1675396006788  success  true  endTime  1675396008481',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.002Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  input  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.002Z',
  log: ' logErrorTrace : unit uniqueId  9be24b6d-3c4a-490a-bc8f-9d5152a0acde  output  {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: ' logErrorTrace : unit uniqueId  f9b3d66f-a032-4212-91bb-7a9d32299546  startTime  1675396008726  success  true  endTime  1675396010486',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: ' logErrorTrace : unit uniqueId  f9b3d66f-a032-4212-91bb-7a9d32299546  input  {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: ' logErrorTrace : unit uniqueId  f9b3d66f-a032-4212-91bb-7a9d32299546  output  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: ' logErrorTrace : unit uniqueId  f42970b9-a3a3-41fc-b6f3-8bd09e8e7040  startTime  1675396009804  success  true  endTime  1675396010209',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: ' logErrorTrace : unit uniqueId  f42970b9-a3a3-41fc-b6f3-8bd09e8e7040  input  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    "  headers: [ { key: 'Authorization', value: 'Bearer ' } ],\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.003Z',
  log: " logErrorTrace : unit uniqueId  f42970b9-a3a3-41fc-b6f3-8bd09e8e7040  output  { ok: false, error: 'not_authed' }",
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.005Z',
  log: ' logErrorTrace : unit uniqueId  a6c177aa-d489-4ba4-b705-60770f5f8a7a  startTime  1675396010457  success  true  endTime  1675396010482',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.006Z',
  log: ' logErrorTrace : unit uniqueId  a6c177aa-d489-4ba4-b705-60770f5f8a7a  input  {}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.006Z',
  log: ' logErrorTrace : unit uniqueId  a6c177aa-d489-4ba4-b705-60770f5f8a7a  output  null',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242  startTime  1675396010745  success  undefined  endTime  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242  input  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242  output  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8144a15c-3a14-4333-b155-6c9f52703437  startTime  1675396011777  success  undefined  endTime  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8144a15c-3a14-4333-b155-6c9f52703437  input  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.007Z',
  log: ' logErrorTrace : unit uniqueId  8144a15c-3a14-4333-b155-6c9f52703437  output  undefined',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.009Z',
  log: 'Execution Error:  EXECUTION_ERROR\n' +
    '    at executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2457:2843)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    '  statusCode: 500,\n' +
    '  payload: { errorStack: [ [Object] ] }\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'error',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.013Z',
  log: 'Execution Error:  EXECUTION_ERROR\n' +
    '    at executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2457:2843)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '    at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '    at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '    at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '    at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    '  statusCode: 500,\n' +
    '  payload: { errorStack: [ [Object], [Object] ] }\n' +
    '}',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:46:52.015Z',
  log: 'completed flow with errors:  63ac3beb37e53412a63aaf9a_version_63dc81b51d72cf5333977a69',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:47:00.073Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:47:00.074Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:47:00.075Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:47:00.076Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:47:00.200Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:47:00.203Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:47:02.751Z',
  log: 'storeExecutionData triggered for executionId :  63dc83a4b1410e2479903207',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:47:02.773Z',
  log: 'putStorageElementFromBuffer storage wrapper containerName ',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:47:02.762Z',
  log: 'storeExecutionData triggered for data:  {\n' +
    '  error: EXECUTION_ERROR\n' +
    '      at executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2457:2843)\n' +
    '      at processTicksAndRejections (node:internal/process/task_queues:96:5)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '      at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '      at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '      at async XWrap.f (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2489:38)\n' +
    '      at async executeSerialUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2484:88)\n' +
    '      at async executor_executeUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2453:783)\n' +
    '      at async executor_runUnitForUser (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2433:111)\n' +
    '      at async unit_executor_executeOTFUnit (/Users/pavan/Documents/GitHub/backflipt-platform/bhadra-build-backend/bhadra-build-js-executor-web/build/bundle.js:2551:726) {\n' +
    '    statusCode: 500,\n' +
    '    payload: { errorStack: [Array] }\n' +
    '  },\n' +
    '  input: {},\n' +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396005166,\n' +
    '      endTime: 1675396005166,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396005960,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396008487,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396006788,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396008481,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396008726,\n' +
    '      output: null,\n' +
    '      endTime: 1675396010486,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396009804,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396010209,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396010457,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396010482,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '8d9a9f89-b1e2-46e0-b5e5-2fe02ee3c242',\n" +
    '      startTime: 1675396010745,\n' +
    '      success: false,\n' +
    '      input: {},\n' +
    '      endTime: 1675396012010,\n' +
    '      error: [ExecutionError]\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '8144a15c-3a14-4333-b155-6c9f52703437',\n" +
    '      startTime: 1675396011777,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8463f4dad3d80fb37bf739',\n" +
    "      serviceVersionId: '5f8463f4dad3d80fb37bf739_version_62bdd6331a2a1fd88ca9b4d7',\n" +
    '      success: false,\n' +
    '      input: [Object],\n' +
    '      endTime: 1675396012008,\n' +
    '      error: [ExecutionError]\n' +
    '    }\n' +
    '  ]\n' +
    '}  executionId  63dc83a4b1410e2479903207',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:47:02.773Z',
  log: 'isValidStoragePlatform triggered',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:47:03.439Z',
  log: 'fetching logger uid',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:47:03.448Z',
  log: 'fetching logger uid for request <ref *2> IncomingMessage {\n' +
    '  _readableState: ReadableState {\n' +
    '    objectMode: false,\n' +
    '    highWaterMark: 16384,\n' +
    '    buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '    length: 0,\n' +
    '    pipes: [],\n' +
    '    flowing: true,\n' +
    '    ended: true,\n' +
    '    endEmitted: true,\n' +
    '    reading: false,\n' +
    '    constructed: true,\n' +
    '    sync: false,\n' +
    '    needReadable: false,\n' +
    '    emittedReadable: false,\n' +
    '    readableListening: false,\n' +
    '    resumeScheduled: false,\n' +
    '    errorEmitted: false,\n' +
    '    emitClose: true,\n' +
    '    autoDestroy: true,\n' +
    '    destroyed: true,\n' +
    '    errored: null,\n' +
    '    closed: true,\n' +
    '    closeEmitted: true,\n' +
    "    defaultEncoding: 'utf8',\n" +
    '    awaitDrainWriters: null,\n' +
    '    multiAwaitDrain: false,\n' +
    '    readingMore: false,\n' +
    '    dataEmitted: true,\n' +
    '    decoder: null,\n' +
    '    encoding: null,\n' +
    '    [Symbol(kPaused)]: false\n' +
    '  },\n' +
    '  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n' +
    '  _eventsCount: 1,\n' +
    '  _maxListeners: undefined,\n' +
    '  socket: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    _server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    timeout: 600000,\n' +
    '    parser: HTTPParser {\n' +
    "      '0': [Function: bound setRequestTimeout],\n" +
    "      '1': [Function: parserOnHeaders],\n" +
    "      '2': [Function: parserOnHeadersComplete],\n" +
    "      '3': [Function: parserOnBody],\n" +
    "      '4': [Function: parserOnMessageComplete],\n" +
    "      '5': [Function: bound onParserExecute],\n" +
    "      '6': [Function: bound onParserTimeout],\n" +
    '      _headers: [],\n' +
    "      _url: '',\n" +
    '      socket: [Circular *1],\n' +
    '      incoming: null,\n' +
    '      outgoing: null,\n' +
    '      maxHeaderPairs: 2000,\n' +
    '      _consumed: true,\n' +
    '      onIncoming: [Function: bound parserOnIncoming],\n' +
    '      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n' +
    '    },\n' +
    '    on: [Function: socketListenerWrap],\n' +
    '    addListener: [Function: socketListenerWrap],\n' +
    '    prependListener: [Function: socketListenerWrap],\n' +
    '    setEncoding: [Function: socketSetEncoding],\n' +
    '    _paused: false,\n' +
    '    _httpMessage: null,\n' +
    "    _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 50629 },\n" +
    '    [Symbol(async_id_symbol)]: 4879,\n' +
    '    [Symbol(kHandle)]: TCP {\n' +
    '      reading: true,\n' +
    '      onconnection: null,\n' +
    '      _consumed: true,\n' +
    '      [Symbol(owner_symbol)]: [Circular *1]\n' +
    '    },\n' +
    '    [Symbol(lastWriteQueueSize)]: 0,\n' +
    '    [Symbol(timeout)]: Timeout {\n' +
    '      _idleTimeout: 600000,\n' +
    '      _idlePrev: [TimersList],\n' +
    '      _idleNext: [TimersList],\n' +
    '      _idleStart: 202184,\n' +
    '      _onTimeout: [Function: bound ],\n' +
    '      _timerArgs: undefined,\n' +
    '      _repeat: null,\n' +
    '      _destroyed: false,\n' +
    '      [Symbol(refed)]: false,\n' +
    '      [Symbol(kHasPrimitive)]: false,\n' +
    '      [Symbol(asyncId)]: 4880,\n' +
    '      [Symbol(triggerId)]: 4879\n' +
    '    },\n' +
    '    [Symbol(kBuffer)]: null,\n' +
    '    [Symbol(kBufferCb)]: null,\n' +
    '    [Symbol(kBufferGen)]: null,\n' +
    '    [Symbol(kCapture)]: false,\n' +
    '    [Symbol(kSetNoDelay)]: false,\n' +
    '    [Symbol(kSetKeepAlive)]: false,\n' +
    '    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n' +
    '    [Symbol(kBytesRead)]: 0,\n' +
    '    [Symbol(kBytesWritten)]: 0,\n' +
    '    [Symbol(RequestTimeout)]: undefined\n' +
    '  },\n' +
    '  httpVersionMajor: 1,\n' +
    '  httpVersionMinor: 1,\n' +
    "  httpVersion: '1.1',\n" +
    '  complete: true,\n' +
    '  rawHeaders: [\n' +
    "    'Accept',\n" +
    "    'application/json, text/plain, */*',\n" +
    "    'Content-Type',\n" +
    "    'application/json',\n" +
    "    'internal-token',\n" +
    "    'Backflipt123$',\n" +
    "    'as-user',\n" +
    "    'pavansandeep@backflipt.com',\n" +
    "    'from-tenant',\n" +
    "    'backflipt.com',\n" +
    "    'x-rq-id',\n" +
    "    'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',\n" +
    "    'User-Agent',\n" +
    "    'axios/0.21.4',\n" +
    "    'Content-Length',\n" +
    "    '11',\n" +
    "    'Host',\n" +
    "    'localhost:3004',\n" +
    "    'Connection',\n" +
    "    'close'\n" +
    '  ],\n' +
    '  rawTrailers: [],\n' +
    '  aborted: false,\n' +
    '  upgrade: false,\n' +
    "  url: '/flows/63ac3beb37e53412a63aaf9a/execute',\n" +
    "  method: 'POST',\n" +
    '  statusCode: null,\n' +
    '  statusMessage: null,\n' +
    '  client: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,'... 8534 more characters,
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:47:04.253Z',
  log: 'Storing execution data complete for fileName :  63dc83a4b1410e2479903207.bson',
  context: {
    requestId: 'f2d72c28-bb25-4e1d-9d09-e00ac30ab48a',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:47:23.188Z',
  log: 'Request received with Query =>  {}  Params =>  {}  Headers => {\n' +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': '22dc9291-8731-4f8e-abff-53477cc69f9b',\n" +
    "  host: 'localhost:3004',\n" +
    "  accept: 'application/json',\n" +
    "  connection: 'close'\n" +
    '} body => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:47:23.188Z',
  log: 'Request origin => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:47:23.189Z',
  log: 'flowRouter : create flow execution context triggered for flowId  63ac3beb37e53412a63aaf9a',
  context: {
    requestId: '22dc9291-8731-4f8e-abff-53477cc69f9b',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:47:23.428Z',
  log: 'fetching logger uid',
  context: {
    requestId: '22dc9291-8731-4f8e-abff-53477cc69f9b',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:47:23.449Z',
  log: 'fetching logger uid for request <ref *2> IncomingMessage {\n' +
    '  _readableState: ReadableState {\n' +
    '    objectMode: false,\n' +
    '    highWaterMark: 16384,\n' +
    '    buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '    length: 0,\n' +
    '    pipes: [],\n' +
    '    flowing: true,\n' +
    '    ended: true,\n' +
    '    endEmitted: false,\n' +
    '    reading: false,\n' +
    '    constructed: true,\n' +
    '    sync: true,\n' +
    '    needReadable: false,\n' +
    '    emittedReadable: false,\n' +
    '    readableListening: false,\n' +
    '    resumeScheduled: true,\n' +
    '    errorEmitted: false,\n' +
    '    emitClose: true,\n' +
    '    autoDestroy: true,\n' +
    '    destroyed: false,\n' +
    '    errored: null,\n' +
    '    closed: false,\n' +
    '    closeEmitted: false,\n' +
    "    defaultEncoding: 'utf8',\n" +
    '    awaitDrainWriters: null,\n' +
    '    multiAwaitDrain: false,\n' +
    '    readingMore: true,\n' +
    '    dataEmitted: false,\n' +
    '    decoder: null,\n' +
    '    encoding: null,\n' +
    '    [Symbol(kPaused)]: false\n' +
    '  },\n' +
    '  _events: [Object: null prototype] {\n' +
    '    end: [ [Function: clearRequestTimeout], [Function: clearIncoming] ]\n' +
    '  },\n' +
    '  _eventsCount: 1,\n' +
    '  _maxListeners: undefined,\n' +
    '  socket: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    _server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    timeout: 600000,\n' +
    '    parser: HTTPParser {\n' +
    "      '0': [Function: bound setRequestTimeout],\n" +
    "      '1': [Function: parserOnHeaders],\n" +
    "      '2': [Function: parserOnHeadersComplete],\n" +
    "      '3': [Function: parserOnBody],\n" +
    "      '4': [Function: parserOnMessageComplete],\n" +
    "      '5': [Function: bound onParserExecute],\n" +
    "      '6': [Function: bound onParserTimeout],\n" +
    '      _headers: [],\n' +
    "      _url: '',\n" +
    '      socket: [Circular *1],\n' +
    '      incoming: [Circular *2],\n' +
    '      outgoing: null,\n' +
    '      maxHeaderPairs: 2000,\n' +
    '      _consumed: true,\n' +
    '      onIncoming: [Function: bound parserOnIncoming],\n' +
    '      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n' +
    '    },\n' +
    '    on: [Function: socketListenerWrap],\n' +
    '    addListener: [Function: socketListenerWrap],\n' +
    '    prependListener: [Function: socketListenerWrap],\n' +
    '    setEncoding: [Function: socketSetEncoding],\n' +
    '    _paused: false,\n' +
    '    _httpMessage: null,\n' +
    "    _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 50668 },\n" +
    '    [Symbol(async_id_symbol)]: 9773,\n' +
    '    [Symbol(kHandle)]: TCP {\n' +
    '      reading: true,\n' +
    '      onconnection: null,\n' +
    '      _consumed: true,\n' +
    '      [Symbol(owner_symbol)]: [Circular *1]\n' +
    '    },\n' +
    '    [Symbol(lastWriteQueueSize)]: 0,\n' +
    '    [Symbol(timeout)]: Timeout {\n' +
    '      _idleTimeout: 600000,\n' +
    '      _idlePrev: [TimersList],\n' +
    '      _idleNext: [TimersList],\n' +
    '      _idleStart: 222173,\n' +
    '      _onTimeout: [Function: bound ],\n' +
    '      _timerArgs: undefined,\n' +
    '      _repeat: null,\n' +
    '      _destroyed: false,\n' +
    '      [Symbol(refed)]: false,\n' +
    '      [Symbol(kHasPrimitive)]: false,\n' +
    '      [Symbol(asyncId)]: 9774,\n' +
    '      [Symbol(triggerId)]: 9773\n' +
    '    },\n' +
    '    [Symbol(kBuffer)]: null,\n' +
    '    [Symbol(kBufferCb)]: null,\n' +
    '    [Symbol(kBufferGen)]: null,\n' +
    '    [Symbol(kCapture)]: false,\n' +
    '    [Symbol(kSetNoDelay)]: false,\n' +
    '    [Symbol(kSetKeepAlive)]: false,\n' +
    '    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n' +
    '    [Symbol(kBytesRead)]: 0,\n' +
    '    [Symbol(kBytesWritten)]: 0,\n' +
    '    [Symbol(RequestTimeout)]: undefined\n' +
    '  },\n' +
    '  httpVersionMajor: 1,\n' +
    '  httpVersionMinor: 1,\n' +
    "  httpVersion: '1.1',\n" +
    '  complete: true,\n' +
    '  rawHeaders: [\n' +
    "    'internal-token',\n" +
    "    'Backflipt123$',\n" +
    "    'as-user',\n" +
    "    'pavansandeep@backflipt.com',\n" +
    "    'from-tenant',\n" +
    "    'backflipt.com',\n" +
    "    'x-rq-id',\n" +
    "    '22dc9291-8731-4f8e-abff-53477cc69f9b',\n" +
    "    'host',\n" +
    "    'localhost:3004',\n" +
    "    'accept',\n" +
    "    'application/json',\n" +
    "    'Connection',\n" +
    "    'close'\n" +
    '  ],\n' +
    '  rawTrailers: [],\n' +
    '  aborted: false,\n' +
    '  upgrade: false,\n' +
    "  url: '/63ac3beb37e53412a63aaf9a/execution/context',\n" +
    "  method: 'GET',\n" +
    '  statusCode: null,\n' +
    '  statusMessage: null,\n' +
    '  client: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    ' '... 8337 more characters,
  context: {
    requestId: '22dc9291-8731-4f8e-abff-53477cc69f9b',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:48:00.147Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:48:00.149Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:48:00.151Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:48:00.152Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:00.272Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:00.274Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'verbose',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:48:29.869Z',
  log: 'Request received with Query =>  {}  Params =>  {}  Headers => {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '} body => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:48:29.871Z',
  log: 'Request origin => undefined',
  context: {}
}
{
  level: 'info',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:48:29.882Z',
  log: 'flowRouter : execute flow triggered for flowId  63ac3beb37e53412a63aaf9a',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'routerLogger',
  timestamp: '2023-02-03T03:48:29.883Z',
  log: 'flow 63ac3beb37e53412a63aaf9a execute headers:  {\n' +
    "  accept: 'application/json, text/plain, */*',\n" +
    "  'content-type': 'application/json',\n" +
    "  'internal-token': 'Backflipt123$',\n" +
    "  'as-user': 'pavansandeep@backflipt.com',\n" +
    "  'from-tenant': 'backflipt.com',\n" +
    "  'x-rq-id': '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',\n" +
    "  'user-agent': 'axios/0.21.4',\n" +
    "  'content-length': '11',\n" +
    "  host: 'localhost:3004',\n" +
    "  connection: 'close'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:31.013Z',
  log: 'running flow:  63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.294Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.295Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.302Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    "  category: 'FLOW',\n" +
    '  shared: false,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  parentUnitsIds: [],\n' +
    '  subUnitsIds: [],\n' +
    '  readAccess: [],\n' +
    '  writeAccess: [],\n' +
    '  sharedVersions: [],\n' +
    "  name: 'test flow 3',\n" +
    "  description: '',\n" +
    '  trigger: {\n' +
    "    type: 'MANUAL',\n" +
    "    label: 'Manual Trigger',\n" +
    "    category: 'SYSTEM',\n" +
    "    id: 'MANUAL',\n" +
    "    name: 'Manual Trigger',\n" +
    "    description: ''\n" +
    '  },\n' +
    "  type: 'SERIAL',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '  inputGUISchema: [],\n' +
    '  units: [\n' +
    '    {\n' +
    "      integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "      name: 'Outlook Mail',\n" +
    "      description: 'Office 365 Suite ',\n" +
    "      outputRef: 'outlook_mail_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "      unitId: '5f8feffeedea7704396dc115',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    },\n' +
    '    {\n' +
    "      integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "      name: 'Slack',\n" +
    "      description: 'Slack Integration',\n" +
    "      outputRef: 'slack_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    "      unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      category: 'SERVICE',\n" +
    '      input: {},\n' +
    '      parser: {},\n' +
    "      versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    }\n' +
    '  ],\n' +
    '  configurableAuth: {},\n' +
    "  versionName: 'v4',\n" +
    "  versionDescription: '',\n" +
    "  updatedBy: 'pavansandeep@backflipt.com',\n" +
    "  createdBy: 'pavansandeep@backflipt.com',\n" +
    "  versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2023-02-03T03:47:36.323Z',\n" +
    "  updatedAt: '2023-02-03T03:47:36.323Z',\n" +
    '  __v: 0\n' +
    '}  uc undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.305Z',
  log: 'Running unit for unit id 63ac3beb37e53412a63aaf9a  with versionId 63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3  unit name test flow 3  with unit type SERIAL',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.307Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.309Z',
  log: ' requiresAuthentication for unit  false',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.309Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.310Z',
  log: 'Prepare Input For Data triggered for input  undefined  parser  undefined  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.311Z',
  log: 'parser empty',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.315Z',
  log: 'before executing: 5f8feffeedea7704396dc115 Outlook Mail outlook_mail_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.316Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.317Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.318Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    '  serviceCategory: [],\n' +
    "  name: 'Get My UserInfo',\n" +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  type: 'SERIAL',\n" +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      category: 'ENTITY_OPERATION',\n" +
    "      versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      parentUnitUniqueId: [Array]\n' +
    '    }\n' +
    '  ],\n' +
    "  tenantId: 'backflipt.com',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    '  tenantSpecific: false,\n' +
    '  inputGUISchema: [],\n' +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  versionName: 'V1',\n" +
    "  versionDescription: '',\n" +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  isDefaultVersion: true,\n' +
    "  createdAt: '2022-12-06T11:43:56.408Z',\n" +
    "  updatedAt: '2022-12-06T11:43:56.408Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    "  name: 'Outlook Mail',\n" +
    "  description: 'Office 365 Suite ',\n" +
    "  outputRef: 'outlook_mail_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    "  unitId: '5f8feffeedea7704396dc115',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  }\n' +
    '}  trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.319Z',
  log: 'Running unit for unit id 5f8feffeedea7704396dc115  with versionId 5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05  unit name Get My UserInfo  with unit type SERIAL',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.319Z',
  log: ' updating trace for unit uniqueId   d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.320Z',
  log: ' Trace  {\n' +
    '  _auth: {},\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396112319\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:32.320Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.165Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.169Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4139,\n' +
    '      ext_expires_in: 4139,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P9-S37QvczzgGdAuSOCHNyPBd8IUZ-ndZkMSNUcCftTS74hm2QBTjnz1P73i7onkePoySdSwplcZm15hubTGr5a8-eVWIsCsVUd9eT97s4xVdrtnTKzDNpUxuBqkp161BaSpFgaOnRtI-8drQjCw5XAanUWTBhOWX4s7zdMEAiPeZf1ws4WDiqGcYSJNZ63JJVneowYoV_W-MNwDi_APwesQaQPbUsvZZQ6oN_NawKFhA8CUvkYUd5EgIutGaGAqEK_yMjFCCpVXA62QkBENRZ0l27M69s20ymXpCJ9wt-I6LmUui85GGXUOxXqvTo2G0uq-pUEr6jcdFPMRnr8bE2WwCGzEcvDKt4ZhYPyV0G-g6nlFEcVE3wATsjktV5eiwGiamKcRCIW9Vtkmh8BaCtBrXCxG-ai9SEX5Af0lE4kWrUnHZp7CntnKrRCHv6v8rB3dyQcbdIeTyteXuUPrQfbBTxe8g8dEdeveDRbi1pudcrMypZgE4rC8CMVUXEGAQZxPJ6E_3JR6gh7X6naLN-A620at_wgAaeqvorB7gRw195dtI56ZDyc1ukSAw8K9ERKG4m1hM2Vi2-ZjaMQaIzQUwPb0UmsF8oXmv-ooBkYygRWE2yvek7R5b_iAmbVyZniXFpw_Fdf7gk2yVkiKmKlFgY12oi0R9bz_gufZfOzxDrEDN3SNAYzRj5VtgVCKdaSoiKSD6ID1fOClXWYPcYTIpHJQAuJGMCSvnRW2MMjxGfHbeJN39s_0NzrXCiNtzTeYnG_K-nTUyqxRynRXAA_ak3VdQSQA2ov1qo7PF428YgPu394KlHgMnLEYzI2nOjSheAdY0kkxIlTl_crvL4Sy8fXLqjbRZJspR3OIDdg2rY82JTABmQ1rO3e2JgOWvkCyzqYjX0'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.170Z',
  log: 'parser empty',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.172Z',
  log: 'before executing: 5f47ad711995ad4d4db2f05e Http Client http_client_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.172Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.172Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.178Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  description: 'Makes request to URL',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA',\n" +
    "      key: 'uri'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    '      required: false,\n' +
    "      defaultValue: 'GET',\n" +
    "      uiType: 'DD',\n" +
    "      key: 'method',\n" +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      label: 'Method'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      keyValues: [Array],\n' +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT'\n" +
    '    },\n' +
    '    {\n' +
    "      uiType: 'OBJECT',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    '      keyValues: [Array],\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    '      required: false,\n' +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array],\n' +
    "      defaultParser: '',\n" +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json'\n" +
    '    },\n' +
    '    {\n' +
    '      keyValues: [Array],\n' +
    "      defaultParser: 'JSON_PATH',\n" +
    '      multiValue: true,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    '      required: false,\n' +
    "      valueLabel: 'Param'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      defaultValue: 'JSON',\n" +
    "      uiType: 'DD',\n" +
    '      pickListValues: [Array],\n' +
    '      dependsOn: null,\n' +
    '      multiSelect: false,\n' +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false\n' +
    '    }\n' +
    '  ],\n' +
    `  module: "const rp = require('request-promise-native');\\n" +\n` +
    `    "const R = require('ramda');\\n" +\n` +
    `    "// const path = require('path');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "OPTIONS"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const INPUT_CONTENT_TYPE = {\\n' +\n" +
    `    '    FORM_URL_ENCODED: "application/x-www-form-urlencoded",\\n' +\n` +
    `    '    JSON: "application/json",\\n' +\n` +
    `    '    FILE_UPLOAD: "multipart/form-data"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const RESPONSE_TYPE = {\\n' +\n" +
    `    '    BINARY: "BINARY",\\n' +\n` +
    `    '    JSON: "JSON",\\n' +\n` +
    `    '    HTML: "HTML",\\n' +\n` +
    `    '    TEXT: "TEXT"\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const decodeURIValues = (values) => R.map(v => decodeURIComponent(v), values);\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = async function(_config) {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("_config: ", _config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(_config.qs, _config.decodeURI);\\n' +\n" +
    "    '    const headers = convertKeyValueArrayToObject(_config.headers, _config.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = _config.decodeURI ? _config.qs && R.zipObj(decodeURIValues(R.keys(_config.qs)), decodeURIValues(R.values(_config.qs))) : queryString;\\n' +\n" +
    "    '    const uri = _config.decodeURI ? decodeURIComponent(_config.uri) : _config.uri;\\n' +\n" +
    "    '    const authHeaders = _config.requiresAuthentication ? authHeader(_config._auth) : {};\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: _config.method || METHODS.GET,\\n' +\n" +
    "    '        uri,\\n' +\n" +
    "    '        headers: R.mergeLeft(headers || {}, authHeaders),\\n' +\n" +
    "    '        qs: qs || {},\\n' +\n" +
    "    '        json: _config.responseType === RESPONSE_TYPE.JSON,\\n' +\n" +
    "    '        simple: true,\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let body = _config.body && (typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body);\\n' +\n` +
    "    '    body = Array.isArray(body) ? convertKeyValueArrayToObject(body, _config.decodeURI) : body;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    if(_config.contentType === INPUT_CONTENT_TYPE.JSON && _config.body) {\\n' +\n" +
    `    '        // options.body = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.body = body;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    else if(_config.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && _config.body) {\\n' +\n" +
    "    '        // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], _config.form));\\n' +\n" +
    `    '        // options.form = typeof(_config.body) === "string" ? JSON.parse(_config.body) : _config.body;\\n' +\n` +
    "    '        options.form = body;\\n' +\n" +
    "    '    } else if(_config.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '        throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return rp(options)\\n' +\n" +
    "    '        .catch(reason => {\\n' +\n" +
    "    '            const err = reason.error;\\n' +\n" +
    `    '            console.error("Error while making call with config: ");\\n' +\n` +
    "    '            console.error(_config);\\n' +\n" +
    "    '            console.error(err);\\n' +\n" +
    "    '            if(reason.statusCode) {\\n' +\n" +
    `    '                console.error("Status Code Error: " + reason.statusCode);\\n' +\n` +
    "    '                const description = `${reason.statusCode} from ${_config.uri}`;\\n' +\n" +
    "    '                const payload = {\\n' +\n" +
    "    '                    error: reason.error,\\n' +\n" +
    "    '                    _auth: _config._auth\\n' +\n" +
    "    '                };\\n' +\n" +
    "    '                throw err;\\n' +\n" +
    "    '                //throw new ExecutionError(description, reason.statusCode, payload);\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            throw err;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const convertKeyValueArrayToObject = (keyValues, decodeURI) => {\\n' +\n" +
    "    '    if(!keyValues) return keyValues;\\n' +\n" +
    "    '    return R.mergeAll(R.map(obj => {\\n' +\n" +
    "    '        const key = decodeURI ? decodeURIComponent(obj.key) : obj.key;\\n' +\n" +
    "    '        const value = decodeURI ? decodeURIComponent(obj.value) : obj.value;\\n' +\n" +
    "    '        return {[key]: value};\\n' +\n" +
    "    '    }, keyValues));\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const authHeader = (_auth) => {\\n' +\n" +
    "    '    let token = _auth.accessToken;\\n' +\n" +
    `    '    let tokenType = "Bearer";\\n' +\n` +
    `    '    if(_auth.authType === "BASIC") {\\n' +\n` +
    `    '        tokenType = "Basic";\\n' +\n` +
    "    '        token = token || encodeToBase64(`${_auth.userName}:${_auth.password}`);\\n' +\n" +
    `    '    } else if(_auth.authType === "API_KEY") {\\n' +\n` +
    "    '        token = token || _auth.apiKey;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '    // return {Authorization: `${_auth.tokenType} ${token}`};\\n' +\n" +
    "    '    return {Authorization: `${tokenType} ${token}`};\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    `    "const encodeToBase64 = (string) => string && Buffer.from(string).toString('base64');\\n" +\n` +
    "    '\\n' +\n" +
    "    'module.exports = run;\\n',\n" +
    "  type: 'HTTP_CALL_VERSION_1',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  name: 'Http Call',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  outputSchema: { type: 'FIXED', schema: {} },\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  versionName: 'v1.0',\n" +
    "  versionDescription: 'This is version-1',\n" +
    "  updatedBy: 'bharath@backflipt.com',\n" +
    "  createdBy: 'bharath@backflipt.com',\n" +
    '  tenantSpecific: false,\n' +
    '  isDefaultVersion: false,\n' +
    "  createdAt: '2022-11-17T11:15:46.819Z',\n" +
    "  updatedAt: '2022-12-28T14:43:52.223Z',\n" +
    '  __v: 0\n' +
    '}  uc {\n' +
    "  entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "  name: 'Http Client',\n" +
    "  description: 'Makes requests to web services using HTTP protocol',\n" +
    "  outputRef: 'http_client_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f33f3f1b593b56a3b67163c',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    "  inputDataKey: '',\n" +
    "  unitId: '5f47ad711995ad4d4db2f05e',\n" +
    '  parser: {\n' +
    "    uri: { type: 'TEMPLATE' },\n" +
    "    decodeURI: { type: 'USER_INPUT' },\n" +
    "    method: { type: 'USER_INPUT' },\n" +
    "    headers_multiValue: { type: 'USER_INPUT' },\n" +
    "    qs_multiValue: { type: 'USER_INPUT' },\n" +
    "    contentType: { type: 'USER_INPUT' },\n" +
    "    body_multiValue: { type: 'JSON_PATH' },\n" +
    "    responseType: { type: 'USER_INPUT' },\n" +
    "    body: { type: 'JSON_PATH' }\n" +
    '  },\n' +
    '  input: {\n' +
    "    uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '    decodeURI: false,\n' +
    "    method: 'GET',\n" +
    "    headers: '',\n" +
    "    qs: '',\n" +
    "    contentType: 'application/json',\n" +
    "    body: '',\n" +
    "    responseType: 'JSON'\n" +
    '  },\n' +
    "  category: 'ENTITY_OPERATION',\n" +
    "  versionId: '5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e',\n" +
    "  serviceId: '5f8feffeedea7704396dc115',\n" +
    "  serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    "  parentUnitUniqueId: [ 'd026a99e-65be-4f01-82fb-b1fe64a676c0' ]\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH"... 7846 more characters,
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.181Z',
  log: 'Running unit for unit id 5f47ad711995ad4d4db2f05e  with versionId 5f47ad711995ad4d4db2f05e_version_5f47ad711995ad4d4db2f05e  unit name Http Call  with unit type HTTP_CALL_VERSION_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.182Z',
  log: ' updating trace for unit uniqueId   9be24b6d-3c4a-490a-bc8f-9d5152a0acde',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.182Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396112319\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.183Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.183Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.186Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'TEMPLATE' },\n" +
    "  decodeURI: { type: 'USER_INPUT' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'JSON_PATH' },\n" +
    "  responseType: { type: 'USER_INPUT' },\n" +
    "  body: { type: 'JSON_PATH' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '604f1f394623800f078d69b5',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://graph.microsoft.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "    tokenType: 'Bearer',\n" +
    '    tokenInfo: {\n' +
    "      token_type: 'Bearer',\n" +
    "      scope: 'AppRoleAssignment.ReadWrite.All AuditLog.Read.All Directory.AccessAsUser.All Directory.Read.All Directory.ReadWrite.All Group.Read.All Group.ReadWrite.All GroupMember.Read.All Mail.Read Mail.Read.All Mail.Read.Shared Mail.ReadBasic Mail.ReadWrite Mail.ReadWrite.All Mail.ReadWrite.Shared Mail.Send Mail.Send.All Mail.Send.Shared MailboxSettings.ReadWrite Reports.Read.All User.Read User.Read.All User.ReadBasic.All User.ReadWrite User.ReadWrite.All profile openid email',\n" +
    '      expires_in: 4139,\n' +
    '      ext_expires_in: 4139,\n' +
    "      access_token: 'eyJ0eXAiOiJKV1QiLCJub25jZSI6IlhadzgzMThfb3pVVXo5N3VpRFQtSnd1aV90V1ppM0NQd0dvTkJsOXE1aU0iLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9iNmZiYzNhZi00NjE2LTQ4OTktYWI3ZC1mOTlkMTkxN2ZjZDYvIiwiaWF0IjoxNjc1Mzk1NjIwLCJuYmYiOjE2NzUzOTU2MjAsImV4cCI6MTY3NTQwMDA2MCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFWUUFxLzhUQUFBQUtZdWpIa0ora1QwOUdLV1dsbE1sRXJPWWVxVXhyVjhrVWVvQUZqSmcyTW5LUHphTzRROFpKUzlBbjM4TFB5ZEd4QXpFQXB1eFZwcVBHK3Y0ajI5c2FrOXYzMlE3UzgxMWR6Y3J0cDNOWHJRPSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiT3V0bG9vayBGb3IgQmFja2ZsaXB0IiwiYXBwaWQiOiJiNjRhMGVkMS1mZjNjLTRlZTYtYmM4Yy01OThkYmU2MGE0YWYiLCJhcHBpZGFjciI6IjEiLCJmYW1pbHlfbmFtZSI6Ik11dGh5YWxhIiwiZ2l2ZW5fbmFtZSI6IlBhdmFuIFNhbmRlZXAiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiI0OS4zNy4xMzAuMjM2IiwibmFtZSI6IlBhdmFuIFNhbmRlZXAgIE11dGh5YWxhIiwib2lkIjoiNzFkMmQ1ODctM2Q2Yy00Y2NjLTk3NWEtNmVhYzdiNjQyNDNkIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTc3NjE4MjI0My0xMTI4ODEzMTk0LTMyNDEyNDkyMzAtMTEyNiIsInBsYXRmIjoiNSIsInB1aWQiOiIxMDAzMjAwMDRGNzZGOTkwIiwicmgiOiIwLkFSY0FyOFA3dGhaR21VaXJmZm1kR1JmODFnTUFBQUFBQUFBQXdBQUFBQUFBQUFBWEFFWS4iLCJzY3AiOiJBcHBSb2xlQXNzaWdubWVudC5SZWFkV3JpdGUuQWxsIEF1ZGl0TG9nLlJlYWQuQWxsIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBHcm91cC5SZWFkLkFsbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIE1haWwuUmVhZCBNYWlsLlJlYWQuQWxsIE1haWwuUmVhZC5TaGFyZWQgTWFpbC5SZWFkQmFzaWMgTWFpbC5SZWFkV3JpdGUgTWFpbC5SZWFkV3JpdGUuQWxsIE1haWwuUmVhZFdyaXRlLlNoYXJlZCBNYWlsLlNlbmQgTWFpbC5TZW5kLkFsbCBNYWlsLlNlbmQuU2hhcmVkIE1haWxib3hTZXR0aW5ncy5SZWFkV3JpdGUgUmVwb3J0cy5SZWFkLkFsbCBVc2VyLlJlYWQgVXNlci5SZWFkLkFsbCBVc2VyLlJlYWRCYXNpYy5BbGwgVXNlci5SZWFkV3JpdGUgVXNlci5SZWFkV3JpdGUuQWxsIHByb2ZpbGUgb3BlbmlkIGVtYWlsIiwic2lnbmluX3N0YXRlIjpbImttc2kiXSwic3ViIjoiendLbHhnOXpVellGVUViYjh1aW9mQzE0aGZRRWUxRDhad3A0YXo4TVpqMCIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJOQSIsInRpZCI6ImI2ZmJjM2FmLTQ2MTYtNDg5OS1hYjdkLWY5OWQxOTE3ZmNkNiIsInVuaXF1ZV9uYW1lIjoicGF2YW5zYW5kZWVwQGJhY2tmbGlwdC5jb20iLCJ1cG4iOiJwYXZhbnNhbmRlZXBAYmFja2ZsaXB0LmNvbSIsInV0aSI6IlNaRkRjNldlWWtLaWZZeEVVSk55QUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiR3pUR2tGQ25tbEVNYzdNRE0tN05Gd0dDb2FZbGRHWWVSNnZwcFYwc2gwWSJ9LCJ4bXNfdGNkdCI6MTQ1MjE3ODQ3MH0.br7CxBD3khPdjwgqqYMNzdmz42q12EaTAkQ2T0KGFkLsnjkavHi8tRC67HRQxAfSneEeB1aWBKLvmiUCByusHwvHY7hcmTDWm7BSxKnMZXeInrXd-oysYM6s_3f1IKkRkGJVTEaHVkvDIIaa-9o0Jz44tu_u1bRB4ni_NRbxAcKeivQn0XjuuEsZ7A8Iq6osnRTwTQ0y-s1HWHksq-8k96h9EJ-A5Io2wRc3gzgx_Owqc7bsKvS11D-fAY9MKXzP4oc7eNrwZbFoWLAOO2Kg7aVyWOQEDUFbD_pKbeZHvPSaQtCT0GTWBgNZQOMART8bTWAiXW8YCgohxHGWqETgQQ',\n" +
    "      refresh_token: '0.ARcAr8P7thZGmUirffmdGRf81tEOSrY8_-ZOvIxZjb5gpK8XAEY.AgABAAEAAAD--DLA3VO7QrddgJg7WevrAgDs_wUA9P9-S37QvczzgGdAuSOCHNyPBd8IUZ-ndZkMSNUcCftTS74hm2QBTjnz1P73i7onkePoySdSwplcZm15hubTGr5a8-eVWIsCsVUd9eT97s4xVdrtnTKzDNpUxuBqkp161BaSpFgaOnRtI-8drQjCw5XAanUWTBhOWX4s7zdMEAiPeZf1ws4WDiqGcYSJNZ63JJVneowYoV_W-MNwDi_APwesQaQPbUsvZZQ6oN_NawKFhA8CUvkYUd5EgIutGaGAqEK_yMjFCCpVXA62QkBENRZ0l27M69s20ymXpCJ9wt-I6LmUui85GGXUOxXqvTo2G0uq-pUEr6jcdFPMRnr8bE2WwCGzEcvDKt4ZhYPyV0G-g6nlFEcVE3wATsjktV5eiwGiamKcRCIW9Vtkmh8BaCtBrXCxG-ai9SEX5Af0lE4kWrUnHZp7CntnKrRCHv6v8rB3dyQcbdIeTyteXuUPrQfbBTxe8g8dEdeveDRbi1pudcrMypZgE4rC8CMVUXEGAQZxPJ6E_3JR6gh7X6naLN-A620at_wgAaeqvorB7gRw195dtI56ZDyc1ukSAw8K9ERKG4m1hM2Vi2-ZjaMQaIzQUwPb0UmsF8oXmv-ooBkYygRWE2yvek7R5b_iAmbVyZniXFpw_Fdf7gk2yVkiKmKlFgY12oi0R9bz_gufZfOzxDrEDN3SNAYzRj5VtgVCKdaSoiKSD6ID1fOClXWYPcYTIpHJQAuJGMCSvnRW2MMjxGfHbeJN39s_0NzrXCiNtzTeYnG_K-nTUyqxRynRXAA_ak3VdQSQA2ov1qo7PF428YgPu394KlHgMnLEYzI2nOjSheAdY0kkxIlTl_crvL4Sy8fXLqjbRZJspR3OIDdg2rY82JTABmQ1rO3e2JgOWvkCyzqYjX0'\n" +
    '    },\n' +
    '    canBeRefreshed: true\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.189Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body', 'type' ], value: 'JSON_PATH' }\n" +
    ']',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.189Z',
  log: 'TransformedInput  {\n' +
    "  uri: '{{{_auth.baseUri}}}/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'JSON'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.189Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.189Z',
  log: 'valuePath => uri',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.190Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.190Z',
  log: ' value from input for value path => uri  is  {{{_auth.baseUri}}}/v1.0/me',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.193Z',
  log: ' value after compile input  => https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.193Z',
  log: ' setting value for valuePath  uri  with value  https://graph.microsoft.com/v1.0/me',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.194Z',
  log: "node => { path: [ 'decodeURI', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.194Z',
  log: 'valuePath => decodeURI',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.194Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.194Z',
  log: 'valuePath => method',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: 'valuePath => contentType',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.195Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.196Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.196Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.196Z',
  log: ' value from input for value path => body_multiValue  is  null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.197Z',
  log: ' value from data  => null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: ' setting value for valuePath  body_multiValue  with value  null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: 'valuePath => responseType',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: "node => { path: [ 'body', 'type' ], value: 'JSON_PATH' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: 'valuePath => body',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: ' parser type of node => JSON_PATH',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.198Z',
  log: ' value from input for value path => body  is  ',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.199Z',
  log: ' value from data  => null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.200Z',
  log: ' setting value for valuePath  body  with value  null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.201Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://graph.microsoft.com/v1.0/me',\n" +
    '  decodeURI: false,\n' +
    "  method: 'GET',\n" +
    "  headers: '',\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    '  body: null,\n' +
    "  responseType: 'JSON',\n" +
    '  body_multiValue: null\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.202Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.571Z',
  log: 'executing unit complete for unit unique id  9be24b6d-3c4a-490a-bc8f-9d5152a0acde',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.572Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      running: true,\n' +
    '      startTime: 1675396112319\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.573Z',
  log: ' Result  => {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.574Z',
  log: 'executing unit complete for unit unique id  d026a99e-65be-4f01-82fb-b1fe64a676c0',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.574Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.575Z',
  log: ' Result  => {\n' +
    "  '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "  businessPhones: [ '9052944960' ],\n" +
    "  displayName: 'Pavan Sandeep  Muthyala',\n" +
    "  givenName: 'Pavan Sandeep',\n" +
    "  jobTitle: 'Software Engineer',\n" +
    "  mail: 'pavansandeep@backflipt.com',\n" +
    '  mobilePhone: null,\n' +
    '  officeLocation: null,\n' +
    '  preferredLanguage: null,\n' +
    "  surname: 'Muthyala',\n" +
    "  userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "  id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.577Z',
  log: 'before executing: 5f9b0643e2ab68041d7bbffd Slack slack_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.577Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.577Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.579Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  category: 'SERVICE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Get My User Id',\n" +
    "  integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "  type: 'SERIAL',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  createdAt: '2020-10-29T18:13:23.224Z',\n" +
    "  updatedAt: '2023-01-31T07:35:07.113Z',\n" +
    '  __v: 0,\n' +
    '  internal: false,\n' +
    '  units: [\n' +
    '    {\n' +
    "      entityId: '5f47a3a81995ad4d4db2f057',\n" +
    "      name: 'Http Client',\n" +
    "      description: 'Makes requests to web services using HTTP protocol',\n" +
    "      outputRef: 'http_client_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    "      inputDataKey: '',\n" +
    "      unitId: '5f7b33614ff9701236686a37',\n" +
    '      parser: [Object],\n' +
    '      input: [Object],\n' +
    "      versionId: '5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347',\n" +
    "      category: 'ENTITY_OPERATION'\n" +
    '    },\n' +
    '    {\n' +
    "      unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "      name: 'Selector',\n" +
    "      description: '',\n" +
    "      outputRef: 'selector_1',\n" +
    '      config: [Object],\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "      versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "      category: 'CORE'\n" +
    '    }\n' +
    '  ],\n' +
    "  unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  versionName: 'Get My User Id',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '}  uc {\n' +
    "  integrationId: '5f2bab4d93419d4986675f2e',\n" +
    "  name: 'Slack',\n" +
    "  description: 'Slack Integration',\n" +
    "  outputRef: 'slack_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: true\n' +
    '  },\n' +
    "  uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    "  unitId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  category: 'SERVICE',\n" +
    '  input: {},\n' +
    '  parser: {},\n' +
    "  versionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  }\n' +
    '}  trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.580Z',
  log: 'Running unit for unit id 5f9b0643e2ab68041d7bbffd  with versionId 5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe  unit name Get My User Id  with unit type SERIAL',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.581Z',
  log: ' updating trace for unit uniqueId   f9b3d66f-a032-4212-91bb-7a9d32299546',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.581Z',
  log: ' Trace  {\n' +
    "  _auth: { '5f33f3f1b593b56a3b67163c': { _auth: [Object] } },\n" +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:33.582Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.472Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.473Z',
  log: 'Prepare Input For Data triggered for input  {}  parser  {}  data  {\n' +
    "  trigger: { category: 'FLOW', type: 'MANUAL' },\n" +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  result: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  outlook_mail_1: {\n' +
    "    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#users/$entity',\n" +
    "    businessPhones: [ '9052944960' ],\n" +
    "    displayName: 'Pavan Sandeep  Muthyala',\n" +
    "    givenName: 'Pavan Sandeep',\n" +
    "    jobTitle: 'Software Engineer',\n" +
    "    mail: 'pavansandeep@backflipt.com',\n" +
    '    mobilePhone: null,\n' +
    '    officeLocation: null,\n' +
    '    preferredLanguage: null,\n' +
    "    surname: 'Muthyala',\n" +
    "    userPrincipalName: 'pavansandeep@backflipt.com',\n" +
    "    id: '71d2d587-3d6c-4ccc-975a-6eac7b64243d'\n" +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.474Z',
  log: 'parser empty',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.474Z',
  log: 'before executing: 5f7b33614ff9701236686a37 Http Client http_client_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.475Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.475Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.483Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347',\n" +
    "  category: 'ENTITY_OPERATION',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Http Call 2.0',\n" +
    "  description: '',\n" +
    '  inputGUISchema: [\n' +
    '    {\n' +
    "      key: 'uri',\n" +
    "      label: 'URL',\n" +
    "      defaultParser: 'TEMPLATE',\n" +
    '      required: true,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    "      uiType: 'TEXTAREA'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'disableSSLVerification',\n" +
    "      label: 'Disable SSL Verification',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'decodeURI',\n" +
    "      label: 'Decode URI',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'CHECKBOX'\n" +
    '    },\n' +
    '    {\n' +
    "      key: 'method',\n" +
    "      label: 'Method',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'GET',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'headers',\n" +
    "      label: 'Headers',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Header',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'qs',\n" +
    "      label: 'Query String',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'contentType',\n" +
    "      label: 'Content Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'application/json',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'body',\n" +
    "      label: 'Body',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: true,\n' +
    "      valueLabel: 'Param',\n" +
    "      defaultValue: '',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'OBJECT',\n" +
    '      keyValues: [Array]\n' +
    '    },\n' +
    '    {\n' +
    "      key: 'responseType',\n" +
    "      label: 'Response Type',\n" +
    "      defaultParser: '',\n" +
    '      required: false,\n' +
    '      multiValue: false,\n' +
    "      defaultValue: 'json',\n" +
    '      dependsOn: null,\n' +
    "      uiType: 'DD',\n" +
    '      multiSelect: false,\n' +
    '      pickListValues: [Array]\n' +
    '    }\n' +
    '  ],\n' +
    '  outputSchema: {\n' +
    "    type: 'FIXED',\n" +
    '    schema: {\n' +
    "      contentType: 'application/json',\n" +
    '      contentLength: 10,\n' +
    "      acceptRanges: 'bytes',\n" +
    "      contentStream: 'data stream'\n" +
    '    }\n' +
    '  },\n' +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const axios = require('axios');\\n" +\n` +
    `    "const https = require('https');\\n" +\n` +
    `    "const url = require('url');\\n" +\n` +
    `    "const path = require('path');\\n" +\n` +
    `    "const FormData = require('form-data');\\n" +\n` +
    "    '// const homePath = path.dirname(require.main.filename);\\n' +\n" +
    `    '// const customErrorPath = path.resolve(homePath, "bhadra-build-js-utils/src/errors/custom-error");\\n' +\n` +
    "    '// const {ExecutionError} = require(customErrorPath);\\n' +\n" +
    "    '// const {InvalidDataError} = require(customErrorPath);\\n' +\n" +
    `    "// const {ExecutionError} = requireUtil('bhadra-build-js-utils/src/errors/custom-error');\\n" +\n` +
    `    "// const {InvalidDataError} = requireUtil('bhadra-build-js-utils/src/errors/custom-error');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const isValidUrl = (urlStr) => {\\n' +\n" +
    "    '    try {\\n' +\n" +
    "    '        new url.URL(urlStr);\\n' +\n" +
    "    '        return true;\\n' +\n" +
    "    '    } catch (e) {\\n' +\n" +
    "    '        return false;\\n' +\n" +
    "    '    }\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const run = (input) => {\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("http call 2.0 input: ", input);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    //TODO handle error conditions like 401, etc..\\n' +\n" +
    "    '    const qs = convertKeyValueArrayToObject(input.qs, input.decodeURI);\\n' +\n" +
    "    '    let headers = convertKeyValueArrayToObject(input.headers, input.decodeURI);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("qs: ", qs);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    // const qs = input.decodeURI ? input.qs && R.zipObj(decodeURIValues(R.keys(input.qs)), decodeURIValues(R.values(input.qs))) : queryString;\\n' +\n" +
    "    '    const reqUrl = input.decodeURI ? decodeURIComponent(input.uri) : input.uri;\\n' +\n" +
    "    '\\n' +\n" +
    `    '    if(!isValidUrl(reqUrl)) throw new Error("Invalid Url: ");//throw new InvalidDataError("Invalid Url: " + reqUrl, {url: reqUrl});\\n' +\n` +
    "    '\\n' +\n" +
    "    '    const authHeaders = input.requiresAuthentication ? authHeader(input._auth) : {};\\n' +\n" +
    "    '\\n' +\n" +
    `    '    let data = input.body && (input.contentType === INPUT_CONTENT_TYPE.JSON && typeof(input.body) === "string" ? JSON.parse(input.body) : input.body);\\n' +\n` +
    "    '    data = Array.isArray(data) && R.includes(input.contentType, [INPUT_CONTENT_TYPE.FORM_URL_ENCODED, INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA]) ? convertKeyValueArrayToObject(data, input.decodeURI) : data;\\n' +\n" +
    "    '    data = input.contentType !== INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA ? data : prepareFormData(data);\\n' +\n" +
    "    '\\n' +\n" +
    `    '    console.log("type of data: ", typeof(data));\\n' +\n` +
    "    '\\n' +\n" +
    `    '    data = typeof(data) === "function" ? data() : data;\\n' +\n` +
    "    '\\n' +\n" +
    "    '    const responseType = input.responseType || RESPONSE_TYPE.JSON;\\n' +\n" +
    "    '\\n' +\n" +
    "    '    headers = R.mergeLeft(headers || {}, authHeaders);\\n' +\n" +
    "    '    headers = input.contentType !== INPUT_CONTENT_TYPE.MULTI_PART_FORM_DATA ? headers : R.mergeLeft(data.getHeaders(), headers);\\n' +\n" +
    "    '\\n' +\n" +
    "    '    let options = {\\n' +\n" +
    "    '        method: input.method || METHODS.GET,\\n' +\n" +
    "    '        url: reqUrl,\\n' +\n" +
    "    '        headers,\\n' +\n" +
    "    '        params: qs || {},\\n' +\n" +
    "    '        data,\\n' +\n" +
    "    '        responseType,\\n' +\n" +
    "    '        maxContentLength: Infinity,\\n' +\n" +
    "    '        maxBodyLength: Infinity\\n' +\n" +
    "    '        //resolveWithFullResponse: false\\n' +\n" +
    "    '    };\\n' +\n" +
    `    '    console.log("options =>",options);\\n' +\n` +
    "    '    if(input.disableSSLVerification) options.httpsAgent = new https.Agent({ rejectUnauthorized: false });\\n' +\n" +
    "    '\\n' +\n" +
    "    '    // if(input.contentType === INPUT_CONTENT_TYPE.JSON && input.body) {\\n' +\n" +
    `    '    //     // options.body = typeof(input.body) === "string" ? JSON.parse(input.body) : input.body;\\n' +\n` +
    "    '    //     options.body = body;\\n' +\n" +
    "    '    // }\\n' +\n" +
    "    '    // else if(input.contentType === INPUT_CONTENT_TYPE.FORM_URL_ENCODED && input.body) {\\n' +\n" +
    "    '    //     // options.form = R.map(values => R.map(val => val[1], values), R.groupBy(el => el[0], input.form));\\n' +\n" +
    `    '    //     // options.form = typeof(input.body) === "string" ? JSON.parse(input.body) : input.body;\\n' +\n` +
    "    '    //     options.form = body;\\n' +\n" +
    "    '    // } else if(input.contentType === INPUT_CONTENT_TYPE.FILE_UPLOAD) {\\n' +\n" +
    `    '    //     throw new Error("Not Supported Yet");\\n' +\n` +
    "    '    // }\\n' +\n" +
    "    '\\n' +\n" +
    `    '    //console.log("Making http call with options: ", options);\\n' +\n` +
    "    '\\n' +\n" +
    "    '    return axios(options)\\n' +\n" +
    "    '        .then(response => {\\n' +\n" +
    `    '            //console.log("resp headers: ", response.headers);\\n' +\n` +
    "    '            if(responseType === RESPONSE_TYPE.BINARY) {\\n' +\n" +
    "    '                return {\\n' +\n" +
    "    '                    contentStream: () => response.data,\\n' +\n" +
    `    "                    contentType: response.headers['content-type'],\\n" +\n` +
    `    "                    contentLength: response.headers['content-length'],\\n" +\n` +
    `    "                    acceptRanges: response.headers['accept-ranges']\\n" +\n` +
    "    '                };\\n' +\n" +
    "    '            }\\n' +\n" +
    "    '            else return response.data;\\n' +\n" +
    "    '        })\\n' +\n" +
    "    '        .catch(error => {\\n' +\n" +
    "    '\\n' +\n" +
    `    '            console.error("Error while making call with input: ", input, " error: ", error);\\n' +\n` +
    `    '            console.error("with response: ", error.response);\\n' +\n` +
    "    '\\n' +\n" +
    "    '            if (error.response) {\\n' +\n" +
    "    '\\n' +\n" +
    "    '                const resp = error.response;\\n' +\n" +
    "    '\\n' +\n" +
    "    '                if(resp.status) {\\n' +\n" +
    `    '                    console.error("Status Code Error: " + resp.status);\\n' +\n` +
    "    '                    const description = `${resp.status} from ${input.uri}`;\\n' +\n" +
    "    '                    // TODO pass error & response data\\n' +\n" +
    "    '                    const payload = {\\n' +\n" +
    "    '                        // error: {\\n' +\n" +
    "    '                        //     message: error.message,\\n' +\n" +
    "    '                        //     config: error.config\\n' +\n" +
    "    '                        // },\\n' +\n" +
    "    '                        // response: {\\n' +\n" +
    "    '                        //     data: resp.data,\\n' +\n" +
    "    '                        //     headers: resp.headers\\n' +\n" +
    "    '                        // },\\n' +\n" +
    "    '                        error: error.toJSON(),\\n' +\n" +
    "    '                        _auth: input._auth\\n' +\n" +
    "    '                    };\\n' +\n" +
    "    '                    //throw new ExecutionError(description, resp.status, payload);\\n' +\n" +
    "    '                    throw error;\\n' +\n" +
    "    '                }\\n' +\n" +
    "    '\\n' +\n" +
    "    '            } else if (error.request) {\\n' +\n" +
    "    '                // The request was made but no response was received\\n' +\n" +
    "    '                // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\\n' +\n" +
    "    '                // http.ClientRequest in node.js\\n' +\n" +
    `    '                // console.error("error with request: ", error.request);\\n' +\n` +
    "    '            } else {\\n' +\n" +
    "    '                // Something happened in setting up the request that triggered an Error\\n' +\n" +
    `    "                //console.log('Error message: ', error.message);\\n" +\n` +
    "    '            }\\n' +\n" +
    `    '            //console.log("Error config: ", error.config);\\n' +\n` +
    "    '\\n' +\n" +
    "    '            throw error;\\n' +\n" +
    "    '        });\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const METHODS = {\\n' +\n" +
    `    '    GET: "GET",\\n' +\n` +
    `    '    POST: "POST",\\n' +\n` +
    `    '    DELETE: "DELETE",\\n' +\n` +
    `    '    PUT: "PUT",\\n' +\n` +
    `    '    OPTIONS: "`... 6590 more characters,
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.486Z',
  log: 'Running unit for unit id 5f7b33614ff9701236686a37  with versionId 5f7b33614ff9701236686a37_version_62bdd6331a2a1fd88ca9b347  unit name Http Call 2.0  with unit type HTTP_CALL_VERSION_2',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.486Z',
  log: ' updating trace for unit uniqueId   f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.487Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      running: true,\n' +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.487Z',
  log: ' requiresAuthentication for unit  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.487Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.489Z',
  log: 'Prepare Input For Data triggered for input  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    '  headers: [\n' +
    '    {\n' +
    "      key: 'Authorization',\n" +
    "      value: 'Bearer {{{_auth.tokenInfo.authed_user.access_token}}}'\n" +
    '    }\n' +
    '  ],\n' +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}  parser  {\n' +
    "  uri: { type: 'USER_INPUT' },\n" +
    "  method: { type: 'USER_INPUT' },\n" +
    "  headers_multiValue: { type: 'USER_INPUT' },\n" +
    '  headers: [ { key: [Object], value: [Object] } ],\n' +
    "  qs_multiValue: { type: 'USER_INPUT' },\n" +
    "  contentType: { type: 'USER_INPUT' },\n" +
    "  body_multiValue: { type: 'USER_INPUT' },\n" +
    "  responseType: { type: 'USER_INPUT' }\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.490Z',
  log: ' Nodes for given parser type  [\n' +
    "  { path: [ 'uri', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'method', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers', 0, 'key', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'headers', 0, 'value', 'type' ], value: 'TEMPLATE' },\n" +
    "  { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'contentType', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'body_multiValue', 'type' ], value: 'USER_INPUT' },\n" +
    "  { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }\n" +
    ']',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.490Z',
  log: 'TransformedInput  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    '  headers: [\n' +
    '    {\n' +
    "      key: 'Authorization',\n" +
    "      value: 'Bearer {{{_auth.tokenInfo.authed_user.access_token}}}'\n" +
    '    }\n' +
    '  ],\n' +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.491Z',
  log: "node => { path: [ 'uri', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.491Z',
  log: 'valuePath => uri',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.491Z',
  log: "node => { path: [ 'method', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: 'valuePath => method',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: "node => { path: [ 'headers_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: 'valuePath => headers_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: "node => { path: [ 'headers', 0, 'key', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: 'valuePath => headers.0.key',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: "node => { path: [ 'headers', 0, 'value', 'type' ], value: 'TEMPLATE' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: 'valuePath => headers.0.value',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.492Z',
  log: ' parser type of node => TEMPLATE',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.493Z',
  log: ' value from input for value path => headers.0.value  is  Bearer {{{_auth.tokenInfo.authed_user.access_token}}}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.495Z',
  log: ' value after compile input  => Bearer ',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.495Z',
  log: ' setting value for valuePath  headers.0.value  with value  Bearer ',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.496Z',
  log: "node => { path: [ 'qs_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.496Z',
  log: 'valuePath => qs_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.496Z',
  log: "node => { path: [ 'contentType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.496Z',
  log: 'valuePath => contentType',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.496Z',
  log: "node => { path: [ 'body_multiValue', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.497Z',
  log: 'valuePath => body_multiValue',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.497Z',
  log: "node => { path: [ 'responseType', 'type' ], value: 'USER_INPUT' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.497Z',
  log: 'valuePath => responseType',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.498Z',
  log: ' Final transformedInput  {\n' +
    "  uri: 'https://slack.com/api/auth.test',\n" +
    "  method: 'GET',\n" +
    "  headers: [ { key: 'Authorization', value: 'Bearer ' } ],\n" +
    "  qs: '',\n" +
    "  contentType: 'application/json',\n" +
    "  body: '',\n" +
    "  responseType: 'json'\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.498Z',
  log: 'Prepare Input For Data complete',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.809Z',
  log: 'executing unit complete for unit unique id  f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.811Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.811Z',
  log: " Result  => { ok: false, error: 'not_authed' }",
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.813Z',
  log: 'before executing: 5ee8ffe42d14f70c922c4192 Selector selector_1',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.814Z',
  log: 'Unit execution started',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.814Z',
  log: 'authVariables: {}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.816Z',
  log: 'Executing unit for tenantId backflipt.com  userId  pavansandeep@backflipt.com  unit {\n' +
    "  _id: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Selector',\n" +
    "  type: 'SIMPLE',\n" +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const jsonpath = require('jsonpath');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const run = async (data, _config) => {\\n' +\n" +
    `    '    //console.log("before running module: ");\\n' +\n` +
    "    '    //console.log(_config);\\n' +\n" +
    "    '    //console.log(typeof(data));\\n' +\n" +
    "    '    //console.log(typeof(_config));\\n' +\n" +
    "    '    if(Array.isArray(data)) return Promise.all(R.map(obj => run(obj, _config), data));\\n' +\n" +
    `    '    else if(typeof(_config.selectors) === "string") return getValueForPathOrDefault(data, _config.selectors, null);\\n' +\n` +
    "    '    else return R.map(sel => getValueForPathOrDefault(data, sel, null), _config.selectors);\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const getValueForPathOrDefault = (obj, path, def) => {\\n' +\n" +
    `    '    //console.log("fetching value for path: " + path);\\n' +\n` +
    "    '    //console.log(obj);\\n' +\n" +
    `    '    return jsonpath.value(obj, "$." + path) || def;\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'module.exports = {\\n' +\n" +
    "    '    run\\n' +\n" +
    "    '};',\n" +
    '  __v: 0,\n' +
    "  createdAt: '2020-08-21T08:33:20.711Z',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  updatedAt: '2022-02-01T14:38:10.605Z',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    '  deprecated: true,\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  versionName: 'Selector',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '}  uc {\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  name: 'Selector',\n" +
    "  description: '',\n" +
    "  outputRef: 'selector_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: false,\n' +
    "    selectors: 'http_client_1.user_id'\n" +
    '  },\n' +
    "  uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    "  serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  parentUnitUniqueId: [ 'f9b3d66f-a032-4212-91bb-7a9d32299546' ]\n" +
    '}  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true,\n' +
    "  result: { ok: false, error: 'not_authed' },\n" +
    "  http_client_1: { ok: false, error: 'not_authed' }\n" +
    '}  trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}  retry  true',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.818Z',
  log: 'Running unit for unit id 5ee8ffe42d14f70c922c4192  with versionId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  unit name Selector  with unit type SIMPLE',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.818Z',
  log: ' updating trace for unit uniqueId   a6c177aa-d489-4ba4-b705-60770f5f8a7a',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.819Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      running: true,\n' +
    '      startTime: 1675396114818,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe'\n" +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.820Z',
  log: ' requiresAuthentication for unit  false',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.820Z',
  log: 'Prepare Input For Data triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.820Z',
  log: 'Prepare Input For Data triggered for input  undefined  parser  undefined  data  {\n' +
    '  _execution: {\n' +
    "    _id: '63dc840fb1410e2479903209',\n" +
    "    tenantId: 'backflipt.com',\n" +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '    testRun: false,\n' +
    "    unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '    startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '    lastRun: { startedAt: null, completedAt: null }\n' +
    '  },\n' +
    '  _auth: {\n' +
    "    userId: 'pavansandeep@backflipt.com',\n" +
    "    credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "    authType: 'OAUTH_2',\n" +
    "    grantType: 'auth_code',\n" +
    "    baseUri: 'https://slack.com',\n" +
    '    configParams: {},\n' +
    "    accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "    tokenType: 'bot',\n" +
    '    tokenInfo: {\n' +
    '      ok: true,\n' +
    "      app_id: 'A01EC981ACU',\n" +
    '      authed_user: [Object],\n' +
    "      scope: 'channels:history,chat:write,channels:manage,im:read,users:read,users.profile:read,users:read.email,mpim:history,mpim:read,mpim:write,im:history,chat:write.public,chat:write.customize,files:read,groups:history,groups:read,channels:read',\n" +
    "      token_type: 'bot',\n" +
    "      access_token: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      bot_user_id: 'U01DRE8DNJK',\n" +
    '      team: [Object],\n' +
    '      enterprise: null,\n' +
    '      is_enterprise_install: false\n' +
    '    },\n' +
    '    canBeRefreshed: false\n' +
    '  },\n' +
    '  requiresAuthentication: true,\n' +
    "  result: { ok: false, error: 'not_authed' },\n" +
    "  http_client_1: { ok: false, error: 'not_authed' }\n" +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.821Z',
  log: 'parser empty',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.821Z',
  log: 'running simple unit for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.822Z',
  log: 'running simple unit for unit {\n' +
    "  _id: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    '  shared: true,\n' +
    '  clonedCount: 0,\n' +
    '  isWorkingCopy: false,\n' +
    "  name: 'Selector',\n" +
    "  type: 'SIMPLE',\n" +
    `  module: "const R = require('ramda');\\n" +\n` +
    `    "const jsonpath = require('jsonpath');\\n" +\n` +
    "    '\\n' +\n" +
    "    'const run = async (data, _config) => {\\n' +\n" +
    `    '    //console.log("before running module: ");\\n' +\n` +
    "    '    //console.log(_config);\\n' +\n" +
    "    '    //console.log(typeof(data));\\n' +\n" +
    "    '    //console.log(typeof(_config));\\n' +\n" +
    "    '    if(Array.isArray(data)) return Promise.all(R.map(obj => run(obj, _config), data));\\n' +\n" +
    `    '    else if(typeof(_config.selectors) === "string") return getValueForPathOrDefault(data, _config.selectors, null);\\n' +\n` +
    "    '    else return R.map(sel => getValueForPathOrDefault(data, sel, null), _config.selectors);\\n' +\n" +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'const getValueForPathOrDefault = (obj, path, def) => {\\n' +\n" +
    `    '    //console.log("fetching value for path: " + path);\\n' +\n` +
    "    '    //console.log(obj);\\n' +\n" +
    `    '    return jsonpath.value(obj, "$." + path) || def;\\n' +\n` +
    "    '};\\n' +\n" +
    "    '\\n' +\n" +
    "    'module.exports = {\\n' +\n" +
    "    '    run\\n' +\n" +
    "    '};',\n" +
    '  __v: 0,\n' +
    "  createdAt: '2020-08-21T08:33:20.711Z',\n" +
    "  createdBy: 'sabbu@backflipt.com',\n" +
    "  updatedAt: '2022-02-01T14:38:10.605Z',\n" +
    "  updatedBy: 'sabbu@backflipt.com',\n" +
    '  deprecated: true,\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  tenantId: 'backflipt.com',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  versionName: 'Selector',\n" +
    "  versionDescription: 'This is 1st version',\n" +
    '  isDefaultVersion: true\n' +
    '} with unit config => {\n' +
    "  unitId: '5ee8ffe42d14f70c922c4192',\n" +
    "  name: 'Selector',\n" +
    "  description: '',\n" +
    "  outputRef: 'selector_1',\n" +
    '  config: {\n' +
    "    integrationId: '5f2bab4d93419d4986675f2e',\n" +
    '    requiresAuthentication: false,\n' +
    "    selectors: 'http_client_1.user_id'\n" +
    '  },\n' +
    "  uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    "  versionId: '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  category: 'CORE',\n" +
    "  serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "  serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    "  parentUnitUniqueId: [ 'f9b3d66f-a032-4212-91bb-7a9d32299546' ],\n" +
    '  input: {\n' +
    '    _execution: {\n' +
    "      _id: '63dc840fb1410e2479903209',\n" +
    "      tenantId: 'backflipt.com',\n" +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      versionId: '63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',\n" +
    '      testRun: false,\n' +
    "      unitId: '63ac3beb37e53412a63aaf9a',\n" +
    '      startedAt: 2023-02-03T03:48:32.288Z,\n' +
    '      lastRun: [Object]\n' +
    '    },\n' +
    '    _auth: {\n' +
    "      userId: 'pavansandeep@backflipt.com',\n" +
    "      credentialId: '5fa5038c9d7cae506b37e62b',\n" +
    "      authType: 'OAUTH_2',\n" +
    "      grantType: 'auth_code',\n" +
    "      baseUri: 'https://slack.com',\n" +
    '      configParams: {},\n' +
    "      accessToken: 'xoxb-597819541045-1467484464631-FnzyJIyBQZg0CrkCZDiuLRP8',\n" +
    "      tokenType: 'bot',\n" +
    '      tokenInfo: [Object],\n' +
    '      canBeRefreshed: false\n' +
    '    },\n' +
    '    requiresAuthentication: true,\n' +
    "    result: { ok: false, error: 'not_authed' },\n" +
    "    http_client_1: { ok: false, error: 'not_authed' }\n" +
    '  }\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.823Z',
  log: 'module key:  [\n' +
    "  '5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9',\n" +
    "  '5ee8ffe42d14f70c922c4192',\n" +
    "  '2022-02-01T14:38:10.605Z',\n" +
    "  'Selector'\n" +
    ']',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.824Z',
  log: 'module for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  module  { run: [AsyncFunction: run] }',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.824Z',
  log: 'module Run Output for unit id 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  =>   null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.824Z',
  log: 'running simple unit for unitId 5ee8ffe42d14f70c922c4192_version_62bdd6331a2a1fd88ca9b2c9  complete.',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.824Z',
  log: 'executing unit complete for unit unique id  a6c177aa-d489-4ba4-b705-60770f5f8a7a',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.825Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      running: true,\n' +
    '      startTime: 1675396113580\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396114818,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396114824,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.826Z',
  log: ' Result  => null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.828Z',
  log: 'executing unit complete for unit unique id  f9b3d66f-a032-4212-91bb-7a9d32299546',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.829Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396113580,\n' +
    '      output: null,\n' +
    '      endTime: 1675396114827,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396114818,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396114824,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.830Z',
  log: ' Result  => null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.831Z',
  log: 'executing unit complete for unit unique id  undefined',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.832Z',
  log: ' Trace  {\n' +
    '  _auth: {\n' +
    "    '5f33f3f1b593b56a3b67163c': { _auth: [Object] },\n" +
    "    '5f2bab4d93419d4986675f2e': { _auth: [Object] }\n" +
    '  },\n' +
    '  _context: {},\n' +
    "  executionId: '63dc840fb1410e2479903209',\n" +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396113580,\n' +
    '      output: null,\n' +
    '      endTime: 1675396114827,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396114818,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396114824,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ],\n' +
    '  authVariables: {}\n' +
    '}',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'verbose',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.832Z',
  log: ' Result  => null',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:34.833Z',
  log: 'tt for execution:  3240',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:48:35.280Z',
  log: 'storeExecutionData triggered for executionId :  63dc840fb1410e2479903209',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:48:35.285Z',
  log: 'putStorageElementFromBuffer storage wrapper containerName ',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:48:35.283Z',
  log: 'storeExecutionData triggered for data:  {\n' +
    '  error: null,\n' +
    '  input: {},\n' +
    '  executionDetails: [\n' +
    '    {\n' +
    "      type: 'MANUAL',\n" +
    '      input: {},\n' +
    "      uniqueId: 'TRIGGER',\n" +
    '      output: [Object],\n' +
    '      startTime: 1675396111592,\n' +
    '      endTime: 1675396111592,\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'd026a99e-65be-4f01-82fb-b1fe64a676c0',\n" +
    '      startTime: 1675396112319,\n' +
    '      output: [Object],\n' +
    '      endTime: 1675396113574,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: '9be24b6d-3c4a-490a-bc8f-9d5152a0acde',\n" +
    '      startTime: 1675396113181,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f8feffeedea7704396dc115',\n" +
    "      serviceVersionId: '5f8feffeedea7704396dc115_version_638f2afc5e967c5ff8aaab05',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396113568,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f9b3d66f-a032-4212-91bb-7a9d32299546',\n" +
    '      startTime: 1675396113580,\n' +
    '      output: null,\n' +
    '      endTime: 1675396114827,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'f42970b9-a3a3-41fc-b6f3-8bd09e8e7040',\n" +
    '      startTime: 1675396114486,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: [Object],\n' +
    '      endTime: 1675396114806,\n' +
    '      input: [Object],\n' +
    '      success: true\n' +
    '    },\n' +
    '    {\n' +
    "      uniqueId: 'a6c177aa-d489-4ba4-b705-60770f5f8a7a',\n" +
    '      startTime: 1675396114818,\n' +
    '      parentUnitUniqueId: [Array],\n' +
    "      serviceId: '5f9b0643e2ab68041d7bbffd',\n" +
    "      serviceVersionId: '5f9b0643e2ab68041d7bbffd_version_62bdd6331a2a1fd88ca9b4fe',\n" +
    '      output: null,\n' +
    '      endTime: 1675396114824,\n' +
    '      input: {},\n' +
    '      success: true\n' +
    '    }\n' +
    '  ]\n' +
    '}  executionId  63dc840fb1410e2479903209',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'storageLogger',
  timestamp: '2023-02-03T03:48:35.285Z',
  log: 'isValidStoragePlatform triggered',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:48:35.893Z',
  log: 'completed flow:  63ac3beb37e53412a63aaf9a_version_63dc83d7833c8c0a56c5aff3',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:48:35.896Z',
  log: 'fetching logger uid',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'coreReqListenerLogger',
  timestamp: '2023-02-03T03:48:35.903Z',
  log: 'fetching logger uid for request <ref *2> IncomingMessage {\n' +
    '  _readableState: ReadableState {\n' +
    '    objectMode: false,\n' +
    '    highWaterMark: 16384,\n' +
    '    buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '    length: 0,\n' +
    '    pipes: [],\n' +
    '    flowing: true,\n' +
    '    ended: true,\n' +
    '    endEmitted: true,\n' +
    '    reading: false,\n' +
    '    constructed: true,\n' +
    '    sync: false,\n' +
    '    needReadable: false,\n' +
    '    emittedReadable: false,\n' +
    '    readableListening: false,\n' +
    '    resumeScheduled: false,\n' +
    '    errorEmitted: false,\n' +
    '    emitClose: true,\n' +
    '    autoDestroy: true,\n' +
    '    destroyed: true,\n' +
    '    errored: null,\n' +
    '    closed: true,\n' +
    '    closeEmitted: true,\n' +
    "    defaultEncoding: 'utf8',\n" +
    '    awaitDrainWriters: null,\n' +
    '    multiAwaitDrain: false,\n' +
    '    readingMore: false,\n' +
    '    dataEmitted: true,\n' +
    '    decoder: null,\n' +
    '    encoding: null,\n' +
    '    [Symbol(kPaused)]: false\n' +
    '  },\n' +
    '  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n' +
    '  _eventsCount: 1,\n' +
    '  _maxListeners: undefined,\n' +
    '  socket: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    _server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '      insecureHTTPParser: undefined,\n' +
    '      _events: [Object: null prototype],\n' +
    '      _eventsCount: 4,\n' +
    '      _maxListeners: undefined,\n' +
    '      _connections: 1,\n' +
    '      _handle: [TCP],\n' +
    '      _usingWorkers: false,\n' +
    '      _workers: [],\n' +
    '      _unref: false,\n' +
    '      allowHalfOpen: true,\n' +
    '      pauseOnConnect: false,\n' +
    '      noDelay: false,\n' +
    '      keepAlive: false,\n' +
    '      keepAliveInitialDelay: 0,\n' +
    '      httpAllowHalfOpen: false,\n' +
    '      timeout: 600000,\n' +
    '      keepAliveTimeout: 5000,\n' +
    '      maxHeadersCount: null,\n' +
    '      maxRequestsPerSocket: 0,\n' +
    '      headersTimeout: 60000,\n' +
    '      requestTimeout: 0,\n' +
    "      _connectionKey: '6::::3004',\n" +
    '      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n' +
    '      [Symbol(ServerResponse)]: [Function: ServerResponse],\n' +
    '      [Symbol(kCapture)]: false,\n' +
    '      [Symbol(async_id_symbol)]: 140\n' +
    '    },\n' +
    '    timeout: 600000,\n' +
    '    parser: HTTPParser {\n' +
    "      '0': [Function: bound setRequestTimeout],\n" +
    "      '1': [Function: parserOnHeaders],\n" +
    "      '2': [Function: parserOnHeadersComplete],\n" +
    "      '3': [Function: parserOnBody],\n" +
    "      '4': [Function: parserOnMessageComplete],\n" +
    "      '5': [Function: bound onParserExecute],\n" +
    "      '6': [Function: bound onParserTimeout],\n" +
    '      _headers: [],\n' +
    "      _url: '',\n" +
    '      socket: [Circular *1],\n' +
    '      incoming: null,\n' +
    '      outgoing: null,\n' +
    '      maxHeaderPairs: 2000,\n' +
    '      _consumed: true,\n' +
    '      onIncoming: [Function: bound parserOnIncoming],\n' +
    '      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]\n' +
    '    },\n' +
    '    on: [Function: socketListenerWrap],\n' +
    '    addListener: [Function: socketListenerWrap],\n' +
    '    prependListener: [Function: socketListenerWrap],\n' +
    '    setEncoding: [Function: socketSetEncoding],\n' +
    '    _paused: false,\n' +
    '    _httpMessage: null,\n' +
    "    _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 50784 },\n" +
    '    [Symbol(async_id_symbol)]: 10206,\n' +
    '    [Symbol(kHandle)]: TCP {\n' +
    '      reading: true,\n' +
    '      onconnection: null,\n' +
    '      _consumed: true,\n' +
    '      [Symbol(owner_symbol)]: [Circular *1]\n' +
    '    },\n' +
    '    [Symbol(lastWriteQueueSize)]: 0,\n' +
    '    [Symbol(timeout)]: Timeout {\n' +
    '      _idleTimeout: 600000,\n' +
    '      _idlePrev: [TimersList],\n' +
    '      _idleNext: [TimersList],\n' +
    '      _idleStart: 294647,\n' +
    '      _onTimeout: [Function: bound ],\n' +
    '      _timerArgs: undefined,\n' +
    '      _repeat: null,\n' +
    '      _destroyed: false,\n' +
    '      [Symbol(refed)]: false,\n' +
    '      [Symbol(kHasPrimitive)]: false,\n' +
    '      [Symbol(asyncId)]: 10207,\n' +
    '      [Symbol(triggerId)]: 10206\n' +
    '    },\n' +
    '    [Symbol(kBuffer)]: null,\n' +
    '    [Symbol(kBufferCb)]: null,\n' +
    '    [Symbol(kBufferGen)]: null,\n' +
    '    [Symbol(kCapture)]: false,\n' +
    '    [Symbol(kSetNoDelay)]: false,\n' +
    '    [Symbol(kSetKeepAlive)]: false,\n' +
    '    [Symbol(kSetKeepAliveInitialDelay)]: 0,\n' +
    '    [Symbol(kBytesRead)]: 0,\n' +
    '    [Symbol(kBytesWritten)]: 0,\n' +
    '    [Symbol(RequestTimeout)]: undefined\n' +
    '  },\n' +
    '  httpVersionMajor: 1,\n' +
    '  httpVersionMinor: 1,\n' +
    "  httpVersion: '1.1',\n" +
    '  complete: true,\n' +
    '  rawHeaders: [\n' +
    "    'Accept',\n" +
    "    'application/json, text/plain, */*',\n" +
    "    'Content-Type',\n" +
    "    'application/json',\n" +
    "    'internal-token',\n" +
    "    'Backflipt123$',\n" +
    "    'as-user',\n" +
    "    'pavansandeep@backflipt.com',\n" +
    "    'from-tenant',\n" +
    "    'backflipt.com',\n" +
    "    'x-rq-id',\n" +
    "    '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',\n" +
    "    'User-Agent',\n" +
    "    'axios/0.21.4',\n" +
    "    'Content-Length',\n" +
    "    '11',\n" +
    "    'Host',\n" +
    "    'localhost:3004',\n" +
    "    'Connection',\n" +
    "    'close'\n" +
    '  ],\n' +
    '  rawTrailers: [],\n' +
    '  aborted: false,\n' +
    '  upgrade: false,\n' +
    "  url: '/63ac3beb37e53412a63aaf9a/execute',\n" +
    "  method: 'POST',\n" +
    '  statusCode: null,\n' +
    '  statusMessage: null,\n' +
    '  client: <ref *1> Socket {\n' +
    '    connecting: false,\n' +
    '    _hadError: false,\n' +
    '    _parent: null,\n' +
    '    _host: null,\n' +
    '    _readableState: ReadableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      buffer: BufferList { head: null, tail: null, length: 0 },\n' +
    '      length: 0,\n' +
    '      pipes: [],\n' +
    '      flowing: true,\n' +
    '      ended: false,\n' +
    '      endEmitted: false,\n' +
    '      reading: true,\n' +
    '      constructed: true,\n' +
    '      sync: false,\n' +
    '      needReadable: true,\n' +
    '      emittedReadable: false,\n' +
    '      readableListening: false,\n' +
    '      resumeScheduled: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      destroyed: false,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      awaitDrainWriters: null,\n' +
    '      multiAwaitDrain: false,\n' +
    '      readingMore: false,\n' +
    '      dataEmitted: false,\n' +
    '      decoder: null,\n' +
    '      encoding: null,\n' +
    '      [Symbol(kPaused)]: false\n' +
    '    },\n' +
    '    _events: [Object: null prototype] {\n' +
    '      end: [Array],\n' +
    '      timeout: [Function: socketOnTimeout],\n' +
    '      data: [Function: bound socketOnData],\n' +
    '      error: [Function: socketOnError],\n' +
    '      close: [Function: bound socketOnClose],\n' +
    '      drain: [Function: bound socketOnDrain],\n' +
    '      resume: [Function: onSocketResume],\n' +
    '      pause: [Function: onSocketPause],\n' +
    '      finish: [Function]\n' +
    '    },\n' +
    '    _eventsCount: 9,\n' +
    '    _maxListeners: undefined,\n' +
    '    _writableState: WritableState {\n' +
    '      objectMode: false,\n' +
    '      highWaterMark: 16384,\n' +
    '      finalCalled: true,\n' +
    '      needDrain: false,\n' +
    '      ending: true,\n' +
    '      ended: true,\n' +
    '      finished: false,\n' +
    '      destroyed: false,\n' +
    '      decodeStrings: false,\n' +
    "      defaultEncoding: 'utf8',\n" +
    '      length: 0,\n' +
    '      writing: false,\n' +
    '      corked: 0,\n' +
    '      sync: false,\n' +
    '      bufferProcessing: false,\n' +
    '      onwrite: [Function: bound onwrite],\n' +
    '      writecb: null,\n' +
    '      writelen: 0,\n' +
    '      afterWriteTickInfo: null,\n' +
    '      buffered: [],\n' +
    '      bufferedIndex: 0,\n' +
    '      allBuffers: true,\n' +
    '      allNoop: true,\n' +
    '      pendingcb: 1,\n' +
    '      constructed: true,\n' +
    '      prefinished: false,\n' +
    '      errorEmitted: false,\n' +
    '      emitClose: false,\n' +
    '      autoDestroy: true,\n' +
    '      errored: null,\n' +
    '      closed: false,\n' +
    '      closeEmitted: false,\n' +
    '      [Symbol(kOnFinished)]: []\n' +
    '    },\n' +
    '    allowHalfOpen: true,\n' +
    '    _sockname: null,\n' +
    '    _pendingData: null,\n' +
    "    _pendingEncoding: '',\n" +
    '    server: Server {\n' +
    '      maxHeaderSize: undefined,\n' +
    '  '... 8510 more characters,
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'info',
  loggerType: 'executionLogger',
  timestamp: '2023-02-03T03:48:36.716Z',
  log: 'Storing execution data complete for fileName :  63dc840fb1410e2479903209.bson',
  context: {
    requestId: '7fc0b0f1-b0c7-45e3-9a15-668e794f1de5',
    userId: 'pavansandeep@backflipt.com',
    tenantId: 'backflipt.com',
    baseURI: 'http://localhost:3004'
  }
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:49:00.244Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:49:00.245Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:49:00.245Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:49:00.246Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:49:00.351Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:49:00.353Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:50:00.333Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:50:00.334Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:50:00.335Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:50:00.335Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:50:00.424Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:50:00.429Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:51:00.618Z',
  log: 'Destroying expired connections...',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:51:00.619Z',
  log: 'Cached connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:51:00.620Z',
  log: 'Expired connections:  [] Count:  0',
  context: {}
}
{
  level: 'debug',
  loggerType: 'sqlLogger',
  timestamp: '2023-02-03T03:51:00.620Z',
  log: 'Destroyed expired connections',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:51:00.710Z',
  log: 'running removing expired cache from connections mapping',
  context: {}
}
{
  level: 'info',
  loggerType: 'executorLogger',
  timestamp: '2023-02-03T03:51:00.711Z',
  log: 'completed removing expired cache from connections mapping',
  context: {}
}
